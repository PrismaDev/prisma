//Must be included before models

function overriddenGet(obj, attr) {
	var chAttr = serverDictionary.get(attr);
	return Backbone.Model.prototype.get.call(obj,chAttr);
}
var ServerDictionary = Backbone.Model.extend({
	defaults: {
			'Dependencia'           : 'Dependencia',
                       	'FaltaCursar'           : 'FaltaCursar',
                        'Selecionada'           : 'Selecionada',
                        'MicroHorario'          : 'MicroHorario',
                        'Disciplinas'           : 'Disciplinas',
                        'Turmas'                : 'Turmas',
                        'Optativas'             : 'Optativas',
                        'Horarios'              : 'Horarios',
                        'CodigoDisciplina'      : 'CodigoDisciplina',
                        'CodigoTurma'           : 'CodigoTurma',
                        'CodigoOptativa'        : 'CodigoOptativa',
                        'PK_Turma'              : 'PK_Turma',
                        'FK_Turma'              : 'FK_Turma',
                        'NomeDisciplina'        : 'NomeDisciplina',
                        'NomeProfessor'         : 'NomeProfessor',
                        'NomeOptativa'          : 'NomeOptativa',
                        'Creditos'              : 'Creditos',
                        'Situacao'              : 'Situacao',
                        'Apto'                  : 'Apto',
                        'Vagas'                 : 'Vagas',
                        'Destino'               : 'Destino',
                        'HorasDistancia'        : 'HorasDistancia',
                        'PeriodoAno'            : 'PeriodoAno',
                        'Tentativas'            : 'Tentativas',
                        'Opcao'                 : 'Opcao',
                        'NoLinha'               : 'NoLinha',
                        'DiaSemana'             : 'DiaSemana',
                        'HoraInicial'           : 'HoraInicial',
                        'HoraFinal'             : 'HoraFinal'
	},
});

var serverDictionary = new ServerDictionary();
var MicrohorarioModel = Backbone.Model.extend({
	url: '/api/microhorario/?Pagina=1&Quantidade=50',
	saveToLocal: function() {}
});
var LayoutStringsModel = Backbone.Model.extend({
	defaults: {
		'hiStr': 'Olá',
		'loginStr': 'Login',
		'logoutStr': 'Logout',
		'projectNameStr': 'PrISMA',
		'userName': 'Bobteco da Silva',
		'footerText': 'Esse projeto é uma colaboração dos alunos\
			Julio Ribeiro, Luiza Silva, Gabriel Martinelli,\
			André Marçal, Denis Neves, Glauber Borges e\
			Maurício Fragale com o professor Sérgio Lifschitz.'
	}
});

var layoutStringsModel = new LayoutStringsModel();
var HorariosModel = Backbone.Model.extend({
	get: function(attribute) {
		return overriddenGet(this,attribute);
	}
});

var HorariosList = Backbone.Collection.extend({
	model: HorariosModel
});

var ClassModel = Backbone.Model.extend({
	initialize: function() {
		var horariosArray = this.get('Horarios');
		var horariosList = new HorariosList(horariosArray);
		this.set(serverDictionary.get('Horarios'),horariosList);
	},

	get: function(attribute) {
		return overriddenGet(this,attribute);
	},

	printSchedule: function() {
		var div = document.createElement('div');
		var daysAbbr=classesTableStringsModel.get('daysAbbr');
		
		_.each(this.get('Horarios').models, function(horario) {
			var span=document.createElement('span');
			span.innerHTML=daysAbbr[horario.get('DiaSemana')-2]+' '
				+horario.get('HoraInicial')+'-'+horario.get('HoraFinal');
			div.appendChild(span);
			div.appendChild(document.createElement('br'));
		});

		return div.innerHTML;
	}
});

ClassList = Backbone.Collection.extend({
	model: ClassModel,

	add: function(models, options) {
		var me=this;
		var array=new Array();

		_.each(models, function(model) {
			if (typeof model == me.model)
				array.push(model);
			else {
				var idName = serverDictionary.get('PK_Turma');
				var nModel = new ClassModel($.extend({},
					{id: model[idName]},model));
				array.push(nModel);
			}
		});

		return Backbone.Collection.prototype.add.call(this,array,options);
	}
});

SubjectModel = Backbone.Model.extend({
	initialize: function() {
		var classesArray = this.get('Turmas');
		var classesList = new ClassList(classesArray);
		this.set(serverDictionary.get('Turmas'),classesList);	
	},

	get: function(attribute) {
		return overriddenGet(this,attribute);
	}
});

SubjectList = Backbone.Collection.extend({
	model: SubjectModel,

	add: function(models, options) {
		var me=this;
		var array=new Array();

		_.each(models, function(model) {
			if (typeof model == me.model)
				array.push(model);
			else {
				var idName = serverDictionary.get('CodigoDisciplina');
				var nModel = new SubjectModel($.extend({},
					{id: model[idName]},model));
				array.push(nModel);
			}
		});

		return Backbone.Collection.prototype.add.call(this,array,options);
	}
})

var subjectList = new SubjectList();
var FaltacursarModel = Backbone.Model.extend({
	get: function(attributes) {
		return overriddenGet(this, attributes);
	},

	getSubjects: function() {
		var array=new Array();
		console.log(subjectList);
		
		_.each(this.get('Disciplinas'), function(disciplina) {
			var subjectModel = subjectList.get(disciplina[
				serverDictionary.get('CodigoDisciplina')
			]);
			var id = disciplina[serverDictionary.get('CodigoDisciplina')];

			var object={
				'code': subjectModel.get('CodigoDisciplina'),
				'name': subjectModel.get('NomeDisciplina'),
				'term': disciplina[serverDictionary.get('PeriodoAno')],
				'credits': subjectModel.get('Creditos'),		
				'able': subjectModel.get('Apto'),
				'status': subjectModel.get('Situacao')
			};

			array.push(object);
		});

		return array;
	},

	getSubjectClasses: function(subjectId) {
		var subjectModel = subjectList.get(subjectId);
		var classList = subjectModel.get('Turmas');
		var array=new Array();

		_.each(classList.models, function(classO) {
			var object={
				'professorName': classO.get('NomeProfessor'),
				'code': classO.get('CodigoTurma'),
				'schedule': classO.printSchedule(),
				'subjectCode': subjectModel.get('CodigoDisciplina'),
				'classId': classO.get('PK_Turma'),
				'status': subjectModel.get('Situacao'),
				'able': subjectModel.get('Apto')
			};

			array.push(object);
		});

		return array;
	}
});

var faltacursarModel = new FaltacursarModel();
var MainStringsModel = Backbone.Model.extend({
	defaults: {
		'faltacursarTabLabel': 'Falta Cursar',
		'microhorarioTabLabel': 'Micro Horário',
		'selectedTabLabel': 'Selecionadas'
	}
});
var mainStringsModel = new MainStringsModel();

var MicrohorarioStringsModel = Backbone.Model.extend({
	defaults: {
		'openFiltersStr': 'Abrir filtros',
		'closeFiltersStr': 'Fechar filtros',
		'subjectCodeLabel': 'Código da disciplina',
		'subjectNameLabel': 'Nome da disciplina',
		'professorNameLabel': 'Professor',
		'moreFiltersStr': 'Mais filtros',
		'lessFiltersStr': 'Menos filtros',
		'toggleBlockedDisabledLabel': 'Exibir disciplinas cursadas ou bloqueadas',
		'noQueryStr': 'Não foi feita nenhuma busca',
		'nCreditsLabel': 'Nº de créditos',
		'targetBlockLabel': 'Bloqueio',
		'dayLabel': 'Dia da semana',
		'timeBeginLabel': 'Horário de início',
		'timeEndLabel': 'Horário de término',
		'noFixedScheduleLabel': 'Sem horário fixo',
		'distanceHoursLabel': 'Com horas à distância',
		'resetButtonLabel': 'Limpar campos',
		'submitButtonLabel': 'Buscar'
	}
});
var microhorarioStringsModel = new MicrohorarioStringsModel();

var SelectedStringsModel = Backbone.Model.extend({
	defaults: {
		'option1Label': '1ª opção',
		'option2Label': '2ª opção',
		'option3Label': '3ª opção',
		'noneLabel': 'N/A'
	}
});

var selectedStringsModel = new SelectedStringsModel();

var TimetableStringsModel = Backbone.Model.extend({
	defaults: {
		'daysLabel': [
			'Segunda',
			'Terça',
			'Quarta',
			'Quinta',
			'Sexta',
			'Sábado'
		]
	}
});

var timetableStringsModel = new TimetableStringsModel();

var SubjectTableStringsModel = Backbone.Model.extend({
	defaults: {
		'subjectCodeLabel': 'Código da disciplina',
		'subjectNameLabel': 'Nome da disciplina',
		'termLabel': 'Período',
		'creditsLabel': 'Nº de créditos',
		'ementaHeaderLabel': 'Ementa',
		'ementaLinkLabel': 'Ver ementa',
		'ementaBaseLink': 'http://www.puc-rio.br/ferramentas/ementas/ementa.aspx?cd='
	}
});

var subjectTableStringsModel = new SubjectTableStringsModel();

var ClassesTableStringsModel = SubjectTableStringsModel.extend({
	defaults: {
		'classCodeLabel': 'Código da turma',
		'professorNameLabel': 'Professor',
		'scheduleLabel': 'Horários',
		'daysAbbr': [
			'Seg',
			'Ter',
			'Qua',
			'Qui',
			'Sex',
			'Sab'
		]
	}
});
//Based on http://stackoverflow.com/questions/6549149/extending-the-defaults-of-a-model-superclass-in-backbone-js
_.extend(ClassesTableStringsModel.prototype.defaults, 
		SubjectTableStringsModel.prototype.defaults);

var classesTableStringsModel = new ClassesTableStringsModel();
var SelectedModel = Backbone.Model.extend({
	options: '',
	viewEl: '#main-selected-div tbody',
	maxRows: 12,
	nOptions: 3,

	initialize: function() {
		options=new Array();

		for (var i=0; i<this.maxRows; i++)
			options[i]=new Array();
	
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				options[i][j]=null;
	},

	getData: function() {
		return options;
	},

	removeClass: function(subjectCode, classId) {
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				if (options[i][j] &&
					options[i][j].subjectCode==subjectCode &&
					options[i][j].classId==classId) {
					
					options[i][j]=null;
					var classModel = subjectList.get(subjectCode)
							.get('Turmas').get(classId);
					
					microhorarioClasseslistView.changeRow(subjectCode, classId, false);
					faltacursarClasseslistView.changeRow(subjectCode, classId, false);

					selectedView.render();
					return true;
				}
		return false;
	},

	addClass: function(subjectCode, classId) {
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				if (options[i][j]==null) {
					var classModel = subjectList.get(subjectCode)
							.get('Turmas').get(classId);
					console.log(classModel);
					
					options[i][j]={
						'subjectCode': subjectCode,
						'classCode': classModel.get('CodigoTurma'),
						'classId': classId
					}

					microhorarioClasseslistView.changeRow(subjectCode, classId, true);
					faltacursarClasseslistView.changeRow(subjectCode, classId, true);

					selectedView.render();
					return true;
				}

		return false;
	},
});

var selectedModel = new SelectedModel();
var TimetableView = Backbone.View.extend({
	template: '',
	startH: 7,
	endH: 23,
	ndays: 6,

	testArray: [
		{
			'nome': 'A',
			'horarios': [
			{
				'diaSemana': 0,
				'horaInicial': 7,
				'horaFinal': 11
			},
			{
				'diaSemana': 2,
				'horaInicial': 7,
				'horaFinal': 11	
			}]
		},
		{
			'nome': 'B',
			'horarios': [
			{
				'diaSemana': 1,
				'horaInicial': 9,
				'horaFinal': 10
			},
			{
				'diaSemana': 2,
				'horaInicial': 13,
				'horaFinal': 15	
			}]
		}

	],

	initialize: function() {
		this.template = _.template($('#timetable-template').html());
	},

	processArray: function(classesArray) {
		var timetableMatrix = new Array();

		for (var hour=this.startH; hour<this.endH; hour++) {
			timetableMatrix[hour] = new Array();

			for (var day=0; day<this.ndays; day++)
				timetableMatrix[hour][day] = {
					'string':'',
					'span': 1,
					'customClass': null
				}
		}

		for (var i=0; i<classesArray.length; i++)
			for (var j=0; j<classesArray[i].horarios.length; j++) {
				var d=classesArray[i].horarios[j].diaSemana;
				var s=classesArray[i].horarios[j].horaInicial;
				var e=classesArray[i].horarios[j].horaFinal;

				timetableMatrix[s][d].string=classesArray[i].nome;
				timetableMatrix[s][d].span=Number(e)-Number(s);
				timetableMatrix[s][d].customClass='ttclass'+i;

				for (var k=s+1; k<e; k++) {
					timetableMatrix[k][d].span=0;
					timetableMatrix[k][d].customClass='ttclass'+i;
				}
			}

		return timetableMatrix;
	},

	buildTableBody: function(classesArray) {
		if (typeof classesArray == undefined)
			classesArray=[];

		var ttmat = this.processArray(classesArray);		
		var tbody = document.createElement('tbody');

		for (var hour=this.startH; hour<this.endH; hour++) {
			var tr = document.createElement('tr');
			$(tr).append('<td class="text-top">'+hour+':00</td>');

			for (var day=0; day<this.ndays; day++) {
				if (ttmat[hour][day].span==0)
					continue;

				var td = document.createElement('td');
				var div = document.createElement('div');

				div.innerHTML = ttmat[hour][day].string;
				
				if (ttmat[hour][day].customClass)
					$(td).addClass(ttmat[hour][day].customClass);
			
				td.rowSpan=ttmat[hour][day].span;

				td.appendChild(div);
				tr.appendChild(td);
			}
			$(tbody).append(tr);
		}

		return $(tbody).html();
	},

	render: function(classesArray) {
		if (!classesArray) classesArray = this.testArray;
		this.$el.html(this.template({
			timetableStr: timetableStringsModel
		}));
	
		this.$el.find('tbody').html(this.buildTableBody(classesArray));
	}
});

var timetableView = new TimetableView();
var FaltacursarView = Backbone.View.extend({
	template: '',
	subjectDatatableView: '',

	//Cached variables
	subjectTableWrapper: '',
	classesDiv: '',
	subjectTable: '',
	subjectDatatable: '',
	subjectTableFilter: '',
	subjectTableHeader: '',	
	subjectTableBody: '',	

	initialize: function() {
		this.template = _.template($('#faltacursar-template').html());
		var me=this;
		$(window).resize(function() {
			me.resize();
		});
	},

	cache: function() {
		this.subjectTableWrapper = $('#faltacursar-subject-table_wrapper');
		this.classesDiv = $('#faltacursar-classes-div');
		this.subjectTable = $('#faltacursar-subject-table');
		this.subjectTableFilter = $('#faltacursar-subject-table_wrapper\
					 .dataTables_filter');
		this.subjectTableHeader = $('#faltacursar-subject-table_wrapper\
					 .dataTables_scrollHead');
		this.subjectTableBody = $('#faltacursar-subject-table_wrapper\
					 .dataTables_scrollBody');
	},

	events: {
		"click #faltacursar-subject-table tr": 'clickOnRow',
		"click #faltacursar-subject-table .ementaButton": 'clickOnEmenta'
	},

	clickOnRow: function(e) {
		var row=$(e.target).parent('tr');

		if ($(row).hasClass('subjectBlocked'))
			return;

		if ($(row).hasClass('subjectSelected')) {
			$(row).removeClass('subjectSelected');
        		
			$(this.subjectTableWrapper).addClass('whole')
						.removeClass('half');
			this.calculateTableScroll();		
			$(this.classesDiv).addClass('hidden');
		}
		else {
			$(this.subjectTable).find('tr.subjectSelected')
				.removeClass('subjectSelected');
			$(row).addClass('subjectSelected');
			
			$(this.subjectTableWrapper).addClass('half')
						.removeClass('whole');
			this.calculateTableScroll();		

        		$(this.classesDiv).removeClass('hidden');
			$(this.classesDiv).addClass('almostHalf');				

			var id=$(row).attr('id');
			faltacursarClasseslistView.render(
				faltacursarModel.getSubjectClasses(id)
			);
			faltacursarClasseslistView.resize();
			this.calculateScrollTop(row);
		}
	},

	clickOnEmenta: function(e) {
		e.stopPropagation();
	},

	resize: function() {
		if (!this.subjectDatatable)
			this.subjectDatatable = $('#faltacursar-subject-table').dataTable();
		this.subjectDatatable.fnAdjustColumnSizing(false);
		this.calculateTableScroll();
	},

	calculateScrollTop: function(row) {
		var rIndex = this.subjectDatatable.fnGetPosition($(row)[0]);
		var w=0;

		$(this.subjectTableBody).find('tr').slice(0,rIndex+1).each(function(index) {
			w+=$(this).height();
		});

		$(this.subjectTableBody).scrollTop(w);
	},

	calculateTableScroll: function() {
		var h = $(this.subjectTableWrapper).height();				
		var headerH = $(this.subjectTableFilter).outerHeight(true)+
			$(this.subjectTableHeader).outerHeight(true);

		var notHeight = $(this.subjectTableBody).outerHeight(true)-
			$(this.subjectTableBody).height();
		$(this.subjectTableBody).height(h-headerH-notHeight);
	},

	initJS: function() {
		var me = this;

		this.subjectDatatable = $('#faltacursar-subject-table').dataTable({
			'sDom': 'ftS',
			'bPaginate': false,
			'bScrollCollapse': true,
			'sScrollY': '200px',
			'bSort': false,
			'fnDrawCallback': function(oSettings) {
				me.calculateTableScroll()
			}
		});
		
		$('#faltacursar-subject-table_wrapper').addClass('whole');
	},		

	render: function() {
		this.$el.html(this.template({
			subjects: faltacursarModel.getSubjects(),
			subjectTableStr: subjectTableStringsModel
		}));
		this.initJS();

		this.cache();
		faltacursarClasseslistView.setElement('#faltacursar-classes-div');

		this.subjectDatatable.fnAdjustColumnSizing(false);
		this.calculateTableScroll();
	}
});

var faltacursarView = new FaltacursarView();
var MicrohorarioView = Backbone.View.extend ({
	template: '',
	waitingTemplate: '',
	noQueryTemplate: '',
	resultsDiv: '',

	//status constants
	noQueryState: 'noQuery',
	queryState: 'query',
	waitingState: 'waiting',

	waitingImgURL: 'http://i.stack.imgur.com/FhHRx.gif',
		
	events: {
		"click #moreFiltersButton": "moreFilters",
		"click #lessFiltersButton": "lessFilters",
		"click #openFiltersButton": "openFilters",
		"click #closeFiltersButton": "closeFilters",
		"submit #microhorario-form": "query"
	},

	//Event handlers
	moreFilters: function() {
		$('#hiddenFilters').removeClass('hidden');
		$('#lessFiltersButton').removeClass('hidden');
		$('#moreFiltersButton').addClass('hidden');
		
		microhorarioClasseslistView.resize();
	},
	
	lessFilters: function() {
		$('#hiddenFilters').addClass('hidden');
		$('#lessFiltersButton').addClass('hidden');
		$('#moreFiltersButton').removeClass('hidden');
		
		microhorarioClasseslistView.resize();
	},

	openFilters: function() {
		$('#microhorario-filter').removeClass('hidden');
		$('#openFiltersButton').addClass('hidden');
		$('#closeFiltersButton').removeClass('hidden');

		microhorarioClasseslistView.resize();
	},

	closeFilters: function() {
		$('#microhorario-filter').addClass('hidden');
		$('#openFiltersButton').removeClass('hidden');
		$('#closeFiltersButton').addClass('hidden');
		
		microhorarioClasseslistView.resize();
	},

	query: function() {
		this.changeState(this.waitingState);
		microhorarioController.fetchData();
		return false;		
	},

	initialize: function() {
		this.template = _.template($('#microhorario-template').html());
		this.waitingTemplate = _.template($('#microhorario-waiting-template').html());
		this.noQueryTemplate = _.template($('#microhorario-noquery-template').html());
	},

	changeState: function(qState, data) {
		if (typeof data == undefined) data=[];

		if (qState==this.queryState) {
			this.closeFilters();
			microhorarioClasseslistView.render(data);
			return;			
		}

		if (qState==this.noQueryState)
			this.$resultsDiv.html(this.noQueryTemplate({
				str: microhorarioStringsModel
			}));
		else 
			this.$resultsDiv.html(this.waitingTemplate({
				waitingImgURL: this.waitingImgURL
			}));
	},

	resize: function() {
		microhorarioClasseslistView.resize();
	},

	render: function() {
		this.$el.html(this.template({
			str: microhorarioStringsModel
		}));
		
		this.$resultsDiv = $('#microhorario-results');
		microhorarioClasseslistView.setElement(this.$resultsDiv);		
		microhorarioClasseslistView.render([]);
		
		this.changeState(this.noQueryState);		
	}
});

var microhorarioView = new MicrohorarioView();
var SelectedView = Backbone.View.extend({
	templateRow: '',
	templateTable: '',
	templateDraggable: '',

	initialize: function() {
		this.templateRow = _.template($('#selected-row-template').html());
		this.templateTable = _.template($('#selected-table-template').html());
		this.templateDraggable = _.template($('#selected-draggable-template').html());
	},

	events: {
		'click button.close': 'deleteClass' 
	},

	resize: function() {},

	equalDroppables: function() {
		var $tr = this.$el.find('tbody tr').first();
		var w = $tr.width();
		var occupy=0;

		var $tds = $tr.find('td.classDroppable').each(function(index) {
			occupy+=$(this).width();
		});

		var perc = Math.ceil((100.*occupy)/(3.*w));
		$tds.css('width',perc+'%');
	},

	deleteClass: function(e) {
		var button = e.target;
		var div = $(e.target).parent('div');

		var subjectCode = $(div).find('input[type="hidden"][name="subjectCode"]').attr('value');
		var classCode = $(div).find('input[type="hidden"][name="classCode"]').attr('value');
		selectedModel.removeClass(subjectCode, classCode);

		this.equalDroppables();
	},

	buildRow: function(index, classArray) {
		var arr=new Array();

		for (var i=0; i<classArray.length; i++)
			if (classArray[i])
				arr[i]=(this.templateDraggable(classArray[i]));
	
		return	this.templateRow({
			'index': index,
			'options': classArray,
			'template': arr
		});
	},

	buildSelected: function(rowsArray) {
		this.$el.html(this.templateTable({
			selectedStr: selectedStringsModel
		}));
		var tbody = this.$el.find('tbody');

		for (var i=0; i<rowsArray.length; i++)
			$(tbody).append(this.buildRow(i,rowsArray[i]));
	
		for (var i=rowsArray.length; i<selectedModel.maxRows; i++)
			$(tbody).append(this.buildRow(i,[]));
	},

	render: function() {
		this.buildSelected(selectedModel.getData());
		this.initJS();
	},

	sortableInit: function() {
		var me=this;

		this.$el.find('tbody.selectedSortable').sortable({
			//Based on http://stackoverflow.com/questions/1307705/jquery-ui-sortable-with-table-and-tr-width/1372954#1372954
	
			helper: function(e, tr) {
				var $originals = tr.children();
    				var $helper = tr.clone();

				$helper.children().each(function(index)
    				{
      					$(this).width($originals.eq(index).width())
    					$(this).height($originals.eq(index).height());
				});
    				return $helper;
  			},	
		
			//Based http://www.ilovecolors.com.ar/preserving-radio-button-checked-state-during-drag-and-drop-jquery/
			start: function (e, ui) {
        			var radio_checked= {};

				me.$el.find('input[type="radio"]', this).each(function(){
					if($(this).is(':checked'))
						radio_checked[$(this).attr('name')] = $(this).val();
					$(document).data('radio_checked', radio_checked);
				});

			}
		}).bind('sortstop', function (event, ui) {
			var radio_restore = $(document).data('radio_checked');

			$.each(radio_restore, function(index, value){
				$('input[name="'+index+'"][value="'+value+'"]').prop('checked', true);
			});
		});
	},

	draggableInit: function() {
		this.$el.find('div.classDraggable').draggable({
			revert: 'invalid',
			zIndex: 1000
		});
	},

	droppableInit: function() {
		var $drop = this.$el.find('td.classDroppable').droppable({
			drop: function(event, ui) {
				if ($(this).has('div.classDraggable')) {
					$(ui.draggable).parent().append(
						$(this).find('div.classDraggable')
					);
				}			

				$(ui.draggable).css({
					'left': '0px',
					'right': '0px',
					'top': '0px',
					'bottom': '0px'
				});
				$(this).append($(ui.draggable));
			},
			accept: '.classDraggable'
		});
	},	

	initJS: function() {
		this.sortableInit();
		this.draggableInit();
		this.droppableInit();
	}
});

var selectedView = new SelectedView();
var MainView = Backbone.View.extend({
	el: 'body',
	mainTemplate: '',
	layoutTemplate: '',
	rendered: false,
	tabs: {'faltacursar': {
			'li': 'main-faltacursar-li',
			'div': 'main-faltacursar-div',
			'href': '#faltacursar',
			'view': faltacursarView
		}, 
		'microhorario': {
			'li': 'main-microhorario-li',
			'div': 'main-microhorario-div',
			'href': '#microhorario',
			'view': microhorarioView
		},
		'selected': {
			'li': 'main-selected-li',
			'div': 'main-selected-div',
			'href': '#selected',
			'view': selectedView
		}},

	defaultTab: 'faltacursar',		

	//Cached variables
	timetableDiv: '',
	sidebarDiv: '',
	tabsNav: '',

	initialize: function() {
		this.mainTemplate = _.template($('#main-template').html());
		this.layoutTemplate = _.template($('#layout-template').html());
		var me = this;
	
		$(window).resize(function() {
			me.equalMainDivsHeight();
		});
	},

	cache: function() {
		this.timetableDiv = document.getElementById('main-timetable-div');
		this.sidebarDiv = document.getElementById('main-sidebar-div');
		this.tabsNav = document.getElementById('main-tabs-nav');
	},

	equalMainDivsHeight: function() {
		var h = $(this.timetableDiv).height();
		$(this.sidebarDiv).height(h);

		var innerH = h-$(this.tabsNav).height();
		faltacursarView.$el.height(innerH);
		microhorarioView.$el.height(innerH);
		selectedView.$el.height(innerH);
	},	

	setActiveTab: function(tab) {
		$('#main-tabs-nav li').removeClass('active');
		$('#main-tab-panes div').removeClass('active');

		$('#'+this.tabs[tab].li).addClass('active');
		$('#'+this.tabs[tab].div).addClass('active');
	
		this.tabs[tab].view.resize();
	},

	renderSubviews: function() {
		timetableView.setElement('#main-timetable-div');
		timetableView.render();

		faltacursarView.setElement('#main-faltacursar-div');
		faltacursarView.render();

		microhorarioView.setElement('#main-microhorario-div');
		microhorarioView.render();

		selectedView.setElement('#main-selected-div');
		selectedView.render();		
	},

	render: function() {
		this.$el.html(this.layoutTemplate({
			layoutStr: layoutStringsModel,
			loggedIn: true
		}));
		$('#content-div').html(this.mainTemplate({
			tabs: this.tabs,
			mainStr: mainStringsModel
		}));
		
		this.renderSubviews();
		this.rendered=true;

		this.cache();
		this.equalMainDivsHeight();
	}
});

var mainView = new MainView();
var ClasseslistView = Backbone.View.extend({
	template: '',
	el: '',
	subjectInfo: '',

	//Cached
	classesDatatable: '',
	classesTableHead: '',
	lassesTableBody: '',

	events: {
		'click .dataTables_scrollBody tr': 'clickOnClass'
	},

	clickOnClass: function(e) {
		var row = $(e.target).parent('tr');
		
		if ($(row).hasClass('subjectBlocked'))
			return;
		if ($(row).hasClass('subjectDisabled'))
			return;

		var subjectCode = $(row).find('input[type="hidden"][name="subjectCode"]').attr('value');
		var classId = $(row).find('input[type="hidden"][name="classId"]').attr('value');

		if ($(row).hasClass('classChosen')) {
			$(row).removeClass('classChosen');
			selectedModel.removeClass(subjectCode,classId);
		}
		else {
			$(row).addClass('classChosen');
			selectedModel.addClass(subjectCode,classId);
		}
	},

	changeRow: function(subjectCode, classId, select) {
		this.$el.find('tr').each(function() {		
			var _subjectCode = $(this).find('input[type="hidden"][name="subjectCode"]').attr('value');
			var _classId = $(this).find('input[type="hidden"][name="classId"]').attr('value');	

			if (_subjectCode==subjectCode && _classId==classId) {
				if (select) $(this).addClass('classChosen');
				else $(this).removeClass('classChosen');
			}
		});
	},

	markChosenRows: function() {
		var ch = selectedModel.getData();

		for (var i=0; i<selectedModel.maxRows; i++)
			for (var j=0; j<selectedModel.nOptions; j++)
				if (ch[i][j]) this.changeRow(ch[i][j].subjectCode, ch[i][j].classId, true);
	},

	cache: function() {
		this.classesTableHead = this.$('.dataTables_scrollHead');
		this.classesTableBody = this.$('.dataTables_scrollBody');
	},

	resize: function() {
		this.classesDatatable.fnDraw(false);
	},

	calculateTableScroll: function() {},

	initialize: function() {
		this.template = _.template($('#classeslist-template').html());
	},

	initJS: function() {		
		var me = this;

		this.classesDatatable = this.$el.find('table').dataTable({			
			'sDom': this.options.sDom,
			'bPaginate': false,
			'bScrollCollapse': true,
			'sScrollY': '100px',
			'bSort': false,
			'fnDrawCallback': function(oSettings) {
				me.calculateTableScroll();
			}
		});
	},

	render: function(classesArray) {
		this.$el.html(this.template({
			classes: classesArray,
			classesTableStr: classesTableStringsModel,
			subjectInfo: this.subjectInfo
		}));	

		this.initJS();
		this.cache();
		this.calculateTableScroll();
		this.markChosenRows();
	}
});

var MicrohorarioClasseslistView = ClasseslistView.extend({
	subjectInfo: true,

	calculateTableScroll: function() {
		var h=0;
		if (!$('#microhorario-filter').hasClass('hidden'))
			h+=$('#microhorario-filter').outerHeight(true);
		h+=$('#microhorario-togglefilter').outerHeight(true);
	
		var diff = $(this.el).outerHeight(true)-$(this.el).height();
		var totH = $(this.el).parent().height()-h-diff;
	
		$(this.el).height(totH);
		var headH = $(this.classesTableHead).outerHeight();
		$(this.classesTableBody).height(totH-headH);
	}
});
var microhorarioClasseslistView = new MicrohorarioClasseslistView({sDom: 't'});

var FaltacursarClasseslistView = ClasseslistView.extend({
	subjectInfo: false,

	calculateTableScroll: function() {
		var h = this.$el.height();
		var headerH= this.$el.find('.dataTables_filter').outerHeight(true)+
			$(this.classesTableHead).outerHeight(true);
		var diff = $(this.classesTableBody).outerHeight(true)-
			$(this.classesTableBody).height();

		$(this.classesTableBody).height(h-headerH-diff);
	},
});
var faltacursarClasseslistView = new FaltacursarClasseslistView({sDom: 'ft'});
function MicrohorarioController() {
	var formEl = '#microhorario-form';
	var url = 'api/microhorario';

	this.fetchData = function() {
		var me=this;

		$.ajax({
			url: url,
			type: 'GET',
			data: $(formEl).serialize(),
			dataType: 'json',

			success: function(data) {
				me.handleData(data);
			}
		});
	}

	this.handleData = function(data) {
		subjectList.add(data[serverDictionary.get('Dependencia')]);
		var array = new Array();		

		_.each(data[serverDictionary.get('MicroHorario')], function(classO) {
			var subjectModel = subjectList.get(
				classO[serverDictionary.get('CodigoDisciplina')]
			);
			var classModel = subjectModel.get('Turmas')
				.get(classO[serverDictionary.get('PK_Turma')]);

			var object={
				'subjectCode': subjectModel.get('CodigoDisciplina'),
				'subjectName': subjectModel.get('NomeDisciplina'),
				'professorName' : classModel.get('NomeProfessor'),
				'schedule': classModel.printSchedule(),
				'code': classModel.get('CodigoTurma'),
				'classId': classModel.get('PK_Turma'),
				'status': subjectModel.get('Situacao'),
				'able': subjectModel.get('Apto')
			};

			array.push(object);
		});

		microhorarioView.changeState(microhorarioView.queryState,array);
	}
}

var microhorarioController = new MicrohorarioController();
function SelectedController() {
	var collidesTime = function(class1Model, class2Model) {

	}

	this.runSimulation = function() {
		var accepted={};

			
	}	
}

var selectedController = new SelectedController();
var MainRouter = Backbone.Router.extend({
	routes: {
		'': 'main',
		':tab': 'tabs'
	},

	loadPage: function() {
		serverDictionary.set(DATA_VIEW.Dicionario);
//		layoutStringsModel.set('userName', 
//			DATA_VIEW.Data[serverDictionary.get('Aluno')][serverDictionary.get('NomeAluno')]);
		subjectList.add(DATA_VIEW.Data[serverDictionary.get('Dependencia')]);
		faltacursarModel.set(DATA_VIEW.Data[serverDictionary.get('FaltaCursar')]);
		mainView.render();
	}
});

var mainRouter = new MainRouter();

mainRouter.on('route:main', function() {
	this.loadPage();
	mainRouter.navigate(mainView.defaultTab,
		{trigger: true});
});

mainRouter.on('route:tabs', function(tab) {
	if (!mainView.tabs[tab])
		return mainRouter.navigate(mainView.defaultTab,
			{trigger: true, replace: true});
	
	if (!mainView.rendered)
		this.loadPage();
	mainView.setActiveTab(tab);
});

//if (history.pushState) { 
//	console.log("pushState supported");
//	Backbone.history.start({pushState: true});
//}
//else {
//	console.log("pushState NOT supported");
	Backbone.history.start();
//}
