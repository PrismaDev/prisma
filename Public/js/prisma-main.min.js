var LayoutStringsModel = Backbone.Model.extend({
	defaults: {
		'hiStr': 'Olá',
		'loginStr': 'Login',
		'logoutStr': 'Logout',
		'commentsStr': 'Sugestões',
		'FAQStr': 'FAQ',
		'tutorialStr': 'Vídeo-tutorial',
		'codTutorialYoutube': 'XHF8WOJ6xI0',
		'projectNameStr': 'PrISMA',
		'userName': 'Bobteco da Silva',
		'footerText': 'Esse projeto é uma colaboração dos alunos\
			Julio Ribeiro, Luiza Silva, Gabriel Martinelli,\
			André Marçal, Denis Neves, Glauber Borges e\
			Maurício Fragale com o professor Sérgio Lifschitz. \
			Contato: prisma@inf.puc-rio.br'
	}
});

var layoutStringsModel = new LayoutStringsModel();
var FAQStringsModel = Backbone.Model.extend({
	defaults: {
		'dialogTitle': 'FAQ',
		'answerStr': 'Resposta:',
		'questionStr': 'Pergunta:',
		'questionList': [
			{
				'question': 'Não consigo logar no sistema.',
				'answer': 'Verifique se suas credenciais do PUC Online estão corretas. Caso positivo, verifique se seu navegador está configurado para aceitar COOKIES.'
			},
			{
				'question': 'O que significa cada cor na tabela de falta-cursar?',
				'answer': 'Vermelho: disciplina presa por algum pré-requisito;\nAmarelo: disciplina que você está cursando ou que está presa por algum pré-requisito que você está cursando;\nBranco: você está "apto" a cursar. Sugerimos verificar ementa no site da PUC para comprovar aptidão.\nAzul: disciplina selecionada. Suas turmas estão sendo exibidas;'
			},
			{
				'question': 'Como adiciono turma?',
				'answer': 'Basta clicar na turma em questão.'
			},
			{
				'question': 'Como removo turma?',
				'answer': 'Clique nela novamente. :-)\nOu então a visualize na aba de selecionadas e clique no botão "x".'
			},
			{
				'question': 'Como sei que a turma foi inserida?',
				'answer': 'É apresentada uma notificação na aba de selecionadas.'
			},
			{
				'question': 'Como adiciono as turmas do micro-horario?',
				'answer': 'Basta clicar na turma em questão.'
			},
			{
				'question': 'O que fazer na tela de selecionada?',
				'answer': 'Você pode fazer o que quiser, basicamente. Tanto trocar as turmas de posição movendo-as para um lugar vazio, quanto trocando-as de lugar com alguma outra. Assim como também é possível trocar as linhas de ordem.'
			},
			{
				'question': 'Mas por que isso é importante?',
				'answer': 'Porque o PUC Online funciona assim. Ao fazer o processamento das disciplinas, as disciplinas mais prioritárias serão aquelas que estão nas primeiras linhas e primeiras opções. Desta maneira, você pode trocar a prioridade de todas as turmas escolhidas simplesmente arrastando elas para onde você quiser.'
			},
			{
				'question': 'Ok, mas e daí?',
				'answer': 'Daí que você pode usar a magica funcionalidade dos radio buttons, apresentados logo do lado esquerdo de cada lugar que pode receber uma turma. Esses radio buttons representam a turma que foi possível de pegar na simulação.'
			},
			{
				'question': 'Simulação? Como funciona?',
				'answer': 'Tem por objetivo simular o que pode acontecer com a sua solicitação de matrícula no PUC Online.\nTendo conhecimento da priorização das primeiras linhas e primeiras opções, a simulação tenta sempre pegar as turmas nesse sentido do processamento. Isto é, você pode simular as opções que serão pegas em cada linha. Automaticamente será realizada uma cascata nas linhas menos prioritárias de forma a mostrar o que realmente aconteceria caso aquela opção fosse pega.'
			},
			{
				'question': 'Legal. Montei minha grade, e agora?',
				'answer': 'Infelizmente sua grade está salva em nosso sistema, mas não no PUC Online. Você deve entrar com os dados que foram gerados aqui no sistema de requisição de matrícula acadêmica, que fica localizado dentro do PUC Online.'
			},
			{
				'question': 'O sistema apresenta erros / não funciona no meu navegador.',
				'answer': 'Infelizmente o sistema foi desenvolvido tirando proveito de recursos não suportados por browsers muito antigos. Recomendo a utilização da versão mais recente do seu browser favorito. Não esqueça de nos notificar o bug para que possamos tentar consertá-lo; utilize o campo de sugestões para tal\n\Obs: o site pode estar não completamente funcional no Internet Explorer. Recomendamos o uso de algum outro navegador popular disponível atualmente. Aqueles que recomendamos são: Google Chrome, Mozilla Firefox, Opera.'
			}
		]
	}
});

var faqStringsModel = new FAQStringsModel();
LayoutView = Backbone.View.extend({
	el: 'body',
	template: '',
	contentView: null,
	loggedIn: false,
	dialogDiv: '#dialogDiv',

	events: {
		'click #open-suggestions-link': 'openSuggestionDialog',
		'click #open-faq-link': 'openFAQDialog',
		'click #open-tutorial-link': 'openTutorialDialog',
		'click ul div.dropdown-menu': 'preventClose'
	},

	openSuggestionDialog: function() {
		suggestionsView.render();
		$(this.dialogDiv).modal('show');
	},

	openFAQDialog: function() {
		faqView.render();
		$(this.dialogDiv).modal('show');
	},

	openTutorialDialog: function() {
		tutorialView.render();
		$(this.dialogDiv).modal('show');
	},

	preventClose: function(e) {
		e.stopPropagation();
	},

	initialize: function() {
		this.template = _.template($('#layout-template').html());
	},

	initJS: function() {
		$('.dropdown-toggle').dropdown();
	},

	setView: function(view) {
		this.contentView=view;
	},

	prepareDialogs: function() {
		if (this.loggedIn) {
			suggestionsView.setElement(this.dialogDiv);
		}
		
		faqView.setElement(this.dialogDiv);
		tutorialView.setElement(this.dialogDiv);
	},
	
	render: function() {
		var args = {
			layoutStr: layoutStringsModel,
			loggedIn: this.loggedIn
		};

		if (!this.loggedIn)
			args={
				layoutStr: layoutStringsModel,
				loggedIn: this.loggedIn,
				loginStr: loginStringsModel
			};

		this.$el.html(this.template(args));	
		this.prepareDialogs();
		this.initJS();
	
		if (this.contentView) 
			this.contentView.setElement('#content-div');
	}
});

var layoutView = new LayoutView();
var DialogView = Backbone.View.extend({
	el: '',
	template: '',	
	args: '',
	templateId: '',
	
	initialize: function() {
		this.template = _.template($(this.templateId).html());
	},

	initJS: function() {
		this.$el.modal();
	},

	render: function() {
		this.$el.html(this.template(this.args));
		this.initJS();
	}
});

var FAQView = DialogView.extend({
	args: {
		faqStr: faqStringsModel
	},
	templateId: '#faq-template'
});

var faqView = new FAQView();

var TutorialView = DialogView.extend({
	args: {
		layoutStr: layoutStringsModel
	},
	templateId: '#tutorial-template',

	initJS: function() {
		//From github.com/twitter/bootstrap/issues/675/

		var me=this;
		this.$el.modal().css({
			'margin-left': function() {
				return -($(this).width()/2);
			}
		}).addClass('tutorial').on('hidden', function() {
			me.$el.empty();
			me.$el.removeClass('tutorial');
		});
	}
});

var tutorialView = new TutorialView();
var SuggestionsStringsModel = Backbone.Model.extend({
	defaults: {
		'dialogTitle': 'Sugestões/Bugs/Comentários...',
		'submitButtonLabel': 'Enviar comentário',
		'resetButtonLabel': 'Limpar campo'
	}
});

var suggestionsStringsModel = new SuggestionsStringsModel();
var SuggestionsView = DialogView.extend({
	templateId: '#suggestions-template',
	args: {
		suggestionsStr: suggestionsStringsModel
	},

	suggestionsUrl: '/api/sugestao',
	
	events: {
		'submit #suggestions-form': 'sendSuggestion'
	},

	sendSuggestion: function() {
		$.ajax({
			url: this.suggestionsUrl,
			type: 'POST',
			data: $('#suggestions-form').serialize(),

			success: function() {
				$('#dialogDiv').modal('hide');
			}
		});

		return false;	
	}
});

var suggestionsView = new SuggestionsView();
//Must be included before models

function overriddenGet(obj, attr) {
	var chAttr = serverDictionary.get(attr);
	return Backbone.Model.prototype.get.call(obj,chAttr);
}
var ServerDictionary = Backbone.Model.extend({
	defaults: {
			'Dependencia'           : 'Dependencia',
                       	'FaltaCursar'           : 'FaltaCursar',
                        'Selecionada'           : 'Selecionada',
                        'MicroHorario'          : 'MicroHorario',
                        'Disciplinas'           : 'Disciplinas',
                        'Turmas'                : 'Turmas',
                        'Optativas'             : 'Optativas',
                        'Horarios'              : 'Horarios',
                        'CodigoDisciplina'      : 'CodigoDisciplina',
                        'CodigoTurma'           : 'CodigoTurma',
                        'CodigoOptativa'        : 'CodigoOptativa',
                        'PK_Turma'              : 'PK_Turma',
                        'FK_Turma'              : 'FK_Turma',
                        'NomeDisciplina'        : 'NomeDisciplina',
                        'NomeProfessor'         : 'NomeProfessor',
                        'NomeOptativa'          : 'NomeOptativa',
                        'Creditos'              : 'Creditos',
                        'Situacao'              : 'Situacao',
                        'Apto'                  : 'Apto',
                        'Vagas'                 : 'Vagas',
                        'Destino'               : 'Destino',
                        'HorasDistancia'        : 'HorasDistancia',
                        'PeriodoAno'            : 'PeriodoAno',
                        'Tentativas'            : 'Tentativas',
                        'Opcao'                 : 'Opcao',
                        'NoLinha'               : 'NoLinha',
                        'DiaSemana'             : 'DiaSemana',
                        'HoraInicial'           : 'HoraInicial',
                        'HoraFinal'             : 'HoraFinal'
	},
});

var serverDictionary = new ServerDictionary();
var MainStringsModel = Backbone.Model.extend({
	defaults: {
		'faltacursarTabLabel': 'Falta Cursar',
		'microhorarioTabLabel': 'Micro Horário',
		'selectedTabLabel': 'Selecionadas'
	}
});
var mainStringsModel = new MainStringsModel();

var MicrohorarioStringsModel = Backbone.Model.extend({
	defaults: {
		'openFiltersStr': 'Abrir filtros',
		'closeFiltersStr': 'Fechar filtros',
		'subjectCodeLabel': 'Código da disciplina',
		'subjectNameLabel': 'Nome da disciplina',
		'professorNameLabel': 'Professor',
		'moreFiltersStr': 'Mais filtros',
		'lessFiltersStr': 'Menos filtros',
		'toggleBlockedDisabledLabel': 'Exibir disciplinas cursadas ou bloqueadas',
		'noQueryStr': 'Não foi feita nenhuma busca',
		'nCreditsLabel': 'Nº de créditos',
		'targetBlockLabel': 'Bloqueio',
		'dayLabel': 'Dia da semana',
		'timeBeginLabel': 'Horário de início',
		'timeEndLabel': 'Horário de término',
		'noFixedScheduleLabel': 'Sem horário fixo',
		'distanceHoursLabel': 'Com horas à distância',
		'resetButtonLabel': 'Limpar campos',
		'submitButtonLabel': 'Buscar',
		'waitingImgURL': '/img/ajax-loader.gif',
		'endOfDataMsg': 'Os resultados para essa busca terminaram'
	}
});
var microhorarioStringsModel = new MicrohorarioStringsModel();

var SelectedStringsModel = Backbone.Model.extend({
	defaults: {
		'option1Label': '1ª opção',
		'option2Label': '2ª opção',
		'option3Label': '3ª opção',
		'noneLabel': 'N/A'
	}
});

var selectedStringsModel = new SelectedStringsModel();

var TimetableStringsModel = Backbone.Model.extend({
	defaults: {
		'daysLabel': [
			'Segunda',
			'Terça',
			'Quarta',
			'Quinta',
			'Sexta',
			'Sábado'
		]
	}
});

var timetableStringsModel = new TimetableStringsModel();

var SubjectTableStringsModel = Backbone.Model.extend({
	defaults: {
		'subjectCodeLabel': 'Código da disciplina',
		'subjectNameLabel': 'Nome da disciplina',
		'termLabel': 'Período',
		'creditsLabel': 'Nº de créditos',
		'ementaHeaderLabel': 'Ementa',
		'ementaLinkLabel': 'Ver ementa',
		'ementaBaseLink': 'http://www.puc-rio.br/ferramentas/ementas/ementa.aspx?cd=',
		'ongoingStr': 'Cursando',
		'chosenSubjectStr': 'Selecionada',
		'noResultsStr': 'Não há resultados para essa busca'
	}
});

var subjectTableStringsModel = new SubjectTableStringsModel();

var ClassesTableStringsModel = SubjectTableStringsModel.extend({
	defaults: {
		'classCodeLabel': 'Código da turma',
		'professorNameLabel': 'Professor',
		'scheduleLabel': 'Horários',
		'daysAbbr': [
			'Seg',
			'Ter',
			'Qua',
			'Qui',
			'Sex',
			'Sab'
		],
		'emptyTableStr': 'Não há turmas a serem exibidas',
		'SHF': 'Sem horário fixo'
	}
});
//Based on http://stackoverflow.com/questions/6549149/extending-the-defaults-of-a-model-superclass-in-backbone-js
_.extend(ClassesTableStringsModel.prototype.defaults, 
		SubjectTableStringsModel.prototype.defaults);

var classesTableStringsModel = new ClassesTableStringsModel();
var HorariosModel = Backbone.Model.extend({
	get: function(attribute) {
		return overriddenGet(this,attribute);
	},

	printHorario: function() {
		var daysAbbr=classesTableStringsModel.get('daysAbbr');	
		if (this.get('DiaSemana'))
			return daysAbbr[this.get('DiaSemana')-2]+' '
				+this.get('HoraInicial')+'-'+this.get('HoraFinal')+
				' ('+this.get('Unidade')+');';
		return classesTableStringsModel.get('SHF')+' ('+this.get('Unidade')+');';
	}
});

var HorariosList = Backbone.Collection.extend({
	model: HorariosModel
});

var ClassModel = Backbone.Model.extend({
	initialize: function() {
		var horariosArray = this.get('Horarios');
		var horariosList = new HorariosList(horariosArray);
		this.set(serverDictionary.get('Horarios'),horariosList);
	},

	get: function(attribute) {
		return overriddenGet(this,attribute);
	},

	printSchedule: function() {
		var div = document.createElement('div');
		
		_.each(this.get('Horarios').models, function(horario) {
			var span=document.createElement('span');
			span.innerHTML=horario.printHorario();

			div.appendChild(span);
			div.appendChild(document.createElement('br'));
		});

		return div.innerHTML;
	}
});

ClassList = Backbone.Collection.extend({
	model: ClassModel,

	add: function(models, options) {
		var me=this;
		var array=new Array();

		_.each(models, function(model) {
			if (typeof model == me.model)
				array.push(model);
			else {
				var idName = serverDictionary.get('PK_Turma');
				var nModel = new ClassModel($.extend({},
					{id: model[idName]},model));
				array.push(nModel);
			}
		});

		return Backbone.Collection.prototype.add.call(this,array,options);
	}
});

SubjectModel = Backbone.Model.extend({
	initialize: function() {
		var classesArray = this.get('Turmas');
		var classesList = new ClassList(classesArray);
		this.set(serverDictionary.get('Turmas'),classesList);	
	},

	get: function(attribute) {
		return overriddenGet(this,attribute);
	}
});

SubjectList = Backbone.Collection.extend({
	model: SubjectModel,

	add: function(models, options) {
		var me=this;
		var array=new Array();

		_.each(models, function(model) {
			if (typeof model == me.model)
				array.push(model);
			else {
				var idName = serverDictionary.get('CodigoDisciplina');
				var nModel = new SubjectModel($.extend({},
					{id: model[idName]},model));
				array.push(nModel);
			}
		});

		return Backbone.Collection.prototype.add.call(this,array,options);
	},

	getClass: function(subjectCode, classId) {
		return this.get(subjectCode).get('Turmas').get(classId);
	}
})

var subjectList = new SubjectList();
var FaltacursarModel = Backbone.Model.extend({
	get: function(attributes) {
		return overriddenGet(this, attributes);
	},

	getTableRows: function() {
		var array=new Array();
		
		_.each(this.get('Disciplinas'), function(disciplina) {
			var subjectModel = subjectList.get(disciplina[
				serverDictionary.get('CodigoDisciplina')
			]);
			var id = disciplina[serverDictionary.get('CodigoDisciplina')];

			var object={
				'code': subjectModel.get('CodigoDisciplina'),
				'name': subjectModel.get('NomeDisciplina'),
				'term': disciplina[serverDictionary.get('PeriodoAno')],
				'credits': subjectModel.get('Creditos'),		
				'able': subjectModel.get('Apto'),
				'status': subjectModel.get('Situacao')
			};

			array.push(object);
		});

		
		_.each(this.get('Optativas'), function(optativa) {
			var object={
				'code': optativa[serverDictionary.get('CodigoOptativa')],
				'name': optativa[serverDictionary.get('NomeOptativa')],
				'term': optativa[serverDictionary.get('PeriodoAno')],
				'credits': '-',
				'able': 2,
				'status': 'NC',
				'optativa': true
			};

			array.push(object);	
		});

		return array;
	},

	getSubjectsOptativa: function(codOpt) {
		var array=new Array();
		var opt, optArr = this.get('Optativas');

		for (var i=0; i<optArr.length; i++)
			if (optArr[i][serverDictionary.get('CodigoOptativa')]==codOpt) {
				opt=optArr[i];
				break;
			}
	
		_.each(opt[serverDictionary.get('Disciplinas')], function(subject) {
			var subjectModel = subjectList.get(subject[
				serverDictionary.get('CodigoDisciplina')
			]);
			var id = subject[serverDictionary.get('CodigoDisciplina')];

			var object={
				'code': subjectModel.get('CodigoDisciplina'),
				'name': subjectModel.get('NomeDisciplina'),
				'term': opt[serverDictionary.get('PeriodoAno')],
				'credits': subjectModel.get('Creditos'),		
				'able': subjectModel.get('Apto'),
				'status': subjectModel.get('Situacao')
			};

			array.push(object);
		});

		return array;
	},

	getSubjectClasses: function(subjectId) {
		var subjectModel = subjectList.get(subjectId);
		var classList = subjectModel.get('Turmas');
		var array=new Array();

		_.each(classList.models, function(classO) {
			var object={
				'professorName': classO.get('NomeProfessor'),
				'code': classO.get('CodigoTurma'),
				'schedule': classO.printSchedule(),
				'subjectCode': subjectModel.get('CodigoDisciplina'),
				'classId': classO.get('PK_Turma'),
				'status': subjectModel.get('Situacao'),
				'able': subjectModel.get('Apto')
			};

			array.push(object);
		});

		return array;
	}
});

var faltacursarModel = new FaltacursarModel();
var SelectedModel = Backbone.Model.extend({
	options: '',
	viewEl: '#main-selected-div tbody',
	maxRows: 12,
	nOptions: 3,

	defaults: {
		addedSinceLastView: 0
	},

	initialize: function() {
		this.options=new Array();

		for (var i=0; i<this.maxRows; i++)
			this.options[i]=new Array();
	
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				this.options[i][j]=null;
	
		this.on("change:addedSinceLastView", function(model){
			mainView.changeBadge(model.get('addedSinceLastView'));
		});
	},

	setFromServer: function(data) {
		var me=this;

		_.each(data, function(row) {
			var subjectCode = row[serverDictionary.get('CodigoDisciplina')];
			var classId = row[serverDictionary.get('FK_Turma')];
			var i = row[serverDictionary.get('NoLinha')];
			var j = row[serverDictionary.get('Opcao')];

			me.options[i][j] = {
				'subjectCode': subjectCode,
				'classCode': subjectList.get(subjectCode).get('Turmas').get(classId).get('CodigoTurma'),
				'classId': classId
			};
		});
	},

	setAll: function(data) {
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				this.options[i][j]=data[i][j];
		
		var arr=new Array();
		var cnt=0;

		for (var i=0; i<this.maxRows; i++) {
			for (var j=0; j<this.nOptions; j++)
				if (this.options[i][j]!=null) 
					arr[cnt++]=this.formatForPost(i,j);
		}

		$.ajax({
			type: 'POST',
			url: '/api/selecionada',
			data: 'json='+JSON.stringify(arr),
			success: function(msg){
				console.log('POST // All  // Msg: '+msg);
			}
		});
	},

	formatForPost: function(i,j) {
		return {
			'NoLinha': i,
			'Opcao': j,
			'FK_Turma': this.options[i][j].classId	
		}
	},

	swapContent: function(ai, aj, bi, bj) {
		var tmp=this.options[ai][aj];
		this.options[ai][aj]=this.options[bi][bj];
		this.options[bi][bj]=tmp;

		var arr=new Array;
		if (this.options[ai][aj]!=null) arr.push(this.formatForPost(ai,aj));
		if (this.options[bi][bj]!=null) arr.push(this.formatForPost(bi,bj));

		$.ajax({
			type: 'POST',
			url: '/api/selecionada',
			data: 'json='+JSON.stringify(arr),
			success: function(msg){
				console.log('POST // Swap  // Msg: '+msg);
			}
		});
	},

	getData: function() {
		return this.options;
	},

	removeClass: function(subjectCode, classId) {
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				if (this.options[i][j] &&
					this.options[i][j].subjectCode==subjectCode &&
					this.options[i][j].classId==classId) {
					
					this.options[i][j]=null;
					var classModel = subjectList.get(subjectCode)
							.get('Turmas').get(classId);
					
					microhorarioClasseslistView.changeRow(subjectCode, classId, false);
					faltacursarClasseslistView.changeRow(subjectCode, classId, false);

					$.ajax({
						type: 'DELETE',
						url: '/api/selecionada',
						data: 'json='+JSON.stringify([{FK_Turma: classId}]),
						success: function(msg){
							console.log('DELETE // Disciplina: '+subjectCode+' // Turma: '+classId+' // Msg: '+msg);
						}
					});

					selectedView.render();
					selectedController.runSimulation();
					
					var sel=false;
					for (var i=0; i<this.maxRows; i++) {
						for (var j=0; j<this.nOptions; j++)
							if (this.options[i][j] && this.options[i][j].subjectCode==subjectCode) {
								sel=true;
								break;
							}

						if (sel) break;
					}

					if (!sel)
						faltacursarView.markAsSelected(subjectCode, false);
					return true;
				}
		return false;
	},

	addClassModel: function(subjectCode, classId, rowNumber, Option)
	{
		var classModel = subjectList.get(subjectCode)
				.get('Turmas').get(classId);
		console.log(classModel);
		
		this.options[rowNumber][Option]={
			'subjectCode': subjectCode,
			'classCode': classModel.get('CodigoTurma'),
			'classId': classId
		}

		microhorarioClasseslistView.changeRow(subjectCode, classId, true);
		faltacursarClasseslistView.changeRow(subjectCode, classId, true);

		$.ajax({
			type: 'POST',
			url: '/api/selecionada',
			data: 'json='+JSON.stringify([{FK_Turma: classId, NoLinha: rowNumber, Opcao: Option}]),
			success: function(msg){
				console.log('POST // Disciplina: '+subjectCode+' // Turma: '+classId+' // Msg: '+msg);
			}
		});

		selectedView.render();
		selectedController.runSimulation();
		faltacursarView.markAsSelected(subjectCode, true);
		return true;

	},

	addClass: function(subjectCode, classId) {
		// same subject in row
		for (var i=0; i<this.maxRows; i++)
		{
			for (var j=0; j<this.nOptions; j++)
			{
				if (this.options[i][j]!=null && this.options[i][j].subjectCode==subjectCode && 
					j != (this.nOptions-1) && this.options[i][j+1]==null)
				{
					this.addClassModel(subjectCode, classId, i, j+1);
					return true;
				}
			}
		}

		// seeking for empty row
		for (var i=0; i<this.maxRows; i++)
			if (this.options[i][0]==null) {
				this.addClassModel(subjectCode, classId, i, 0);
				return true;
			}

		// else
		for (var i=0; i<this.maxRows; i++)
			for (var j=0; j<this.nOptions; j++)
				if (this.options[i][j]==null) {
					this.addClassModel(subjectCode, classId, i, j);
					return true;
				}

		return false;
	},
});

var selectedModel = new SelectedModel();
//Code from Allan Jardine (http://datatables.net/plug-ins/api#fnAddTr)

$.fn.dataTableExt.oApi.fnAddTr = function ( oSettings, nTr, bRedraw ) {
    if ( typeof bRedraw == 'undefined' )
    {
        bRedraw = true;
    }
      
    var nTds = nTr.getElementsByTagName('td');
    if ( nTds.length != oSettings.aoColumns.length )
    {
        alert( 'Warning: not adding new TR - columns and TD elements must match' );
        return;
    }
      
    var aData = [];
    for ( var i=0 ; i<nTds.length ; i++ )
    {
        aData.push( nTds[i].innerHTML );
    }
      
    /* Add the data and then replace DataTable's generated TR with ours */
    var iIndex = this.oApi._fnAddData( oSettings, aData );
    nTr._DT_RowIndex = iIndex;
    oSettings.aoData[ iIndex ].nTr = nTr;
      
    oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
      
    if ( bRedraw )
    {
        this.oApi._fnReDraw( oSettings );
    }
};
var TimetableView = Backbone.View.extend({
	template: '',
	startH: 7,
	endH: 23,
	ndays: 6,
	ttmat: '',

	initialize: function() {
		this.template = _.template($('#timetable-template').html());
	},

	bindCell: function(el) {
		$(el).click(function() {
			microhorarioView.searchFor($(el).data('day'),
				$(el).data('initTime'), $(el).data('subjectCode'));
		});
	},

	bindCallbacks: function() {
		var ths = this.$el.find('th');

		_.each(ths, function(th, index) {
			$(th).data({'day': (index==0? null: (index-1)+2), 'initTime': null});
		});

		var tds = this.$el.find('td');
		var cnt=0;		

		for (var hour=this.startH; hour<this.endH; hour++) {
			$(tds[cnt++]).data({'day': null, 'initTime': hour,
						'subjectCode': null});			

			for (var day=2; day<this.ndays+2; day++)
				if (this.ttmat[hour][day].span!=0) {	
					if (this.ttmat[hour][day].subjectCode!=null)
						$(tds[cnt++]).data({'subjectCode': this.ttmat[hour][day].subjectCode,
									'day': null, 'initTime': null});
					else
						$(tds[cnt++]).data({'day': day, 'initTime': hour,
									'subjectCode': null});	
				}
		}

		var cells = this.$el.find('td, th');
		var me=this;
		

		_.each(cells, function(cell) {
			me.bindCell(cell);
		})
	},

	formatString: function(timeIdx, classModel, subjectCode) {
		var unit=classModel.get('Horarios').models[timeIdx].get('Unidade');
		return subjectCode+' - '+classModel.get('CodigoTurma')+'<br/>'+
		'<span>'+subjectList.get(subjectCode).get('NomeDisciplina')+'</span><br/>'+
		'<span>('+unit+')</span>';
	},

	processArray: function(classesArray) {
		var timetableMatrix = new Array();

		for (var hour=this.startH; hour<this.endH; hour++) {
			timetableMatrix[hour] = new Array();

			for (var day=2; day<this.ndays+2; day++)
				timetableMatrix[hour][day] = {
					'string':'',
					'span': 1,
					'customClass': null,
					'subjectCode': null
				}
		}

		for (var i=0; i<classesArray.length; i++) {
			var classModel=subjectList.getClass(classesArray[i].subjectCode,
					classesArray[i].classId);
			var h=classModel.get('Horarios').models;		

			for (var j=0; j<h.length; j++) {
				var d=h[j].get('DiaSemana');
				var s=h[j].get('HoraInicial');
				var e=h[j].get('HoraFinal');
			
				if (!d)
					continue;

				timetableMatrix[s][d].string=this.formatString(j,classModel,
					classesArray[i].subjectCode);
				timetableMatrix[s][d].span=Number(e)-Number(s);
				timetableMatrix[s][d].customClass='ttclass'+
					classesArray[i].cssClass;
				timetableMatrix[s][d].subjectCode=classesArray[i].subjectCode;

				for (var k=s+1; k<e; k++)
					timetableMatrix[k][d].span=0;
			}
		}

		return timetableMatrix;
	},

	buildTableBody: function(classesArray) {
		if (classesArray == undefined)
			classesArray=[];

		this.ttmat = this.processArray(classesArray);		
		var tbody = document.createElement('tbody');

		for (var hour=this.startH; hour<this.endH; hour++) {
			var tr = document.createElement('tr');
			var tdH = document.createElement('td');
			
			$(tdH).addClass('text-top');
			$(tdH).html(hour+':00');			

			$(tr).append(tdH);

			for (var day=2; day<this.ndays+2; day++) {
				if (this.ttmat[hour][day].span==0)
					continue;

				var td = document.createElement('td');
				var div = document.createElement('div');

				div.innerHTML = this.ttmat[hour][day].string;
				
				if (this.ttmat[hour][day].customClass)
					$(td).addClass(this.ttmat[hour][day].customClass);
			
				td.rowSpan=this.ttmat[hour][day].span;

				td.appendChild(div);
				tr.appendChild(td);
			}
			$(tbody).append(tr);
		}

		return $(tbody).html();
	},

	render: function(classesArray) {
		this.$el.html(this.template({
			timetableStr: timetableStringsModel
		}));
	
		this.$el.find('tbody').html(this.buildTableBody(classesArray));
		this.bindCallbacks();
	}
});

var timetableView = new TimetableView();
var FaltacursarView = Backbone.View.extend({
	template: '',
	templateRow: '',
	subjectDatatableView: '',

	//Cached variables
	subjectTableWrapper: '',
	classesDiv: '',
	subjectTable: '',
	subjectDatatable: '',
	subjectTableFilter: '',
	subjectTableHeader: '',	
	subjectTableBody: '',	

	initialize: function() {
		this.template = _.template($('#faltacursar-template').html());
		this.templateRow = _.template($('#faltacursar-row-template').html());

		var me=this;
		$(window).resize(function() {
			me.resize();
		});
	},

	cache: function() {
		this.subjectTableWrapper = $('#faltacursar-subject-table_wrapper');
		this.classesDiv = $('#faltacursar-classes-div');
		this.subjectTable = $('#faltacursar-subject-table');
		this.subjectTableFilter = $('#faltacursar-subject-table_wrapper\
					 .dataTables_filter');
		this.subjectTableHeader = $('#faltacursar-subject-table_wrapper\
					 .dataTables_scrollHead');
		this.subjectTableBody = $('#faltacursar-subject-table_wrapper\
					 .dataTables_scrollBody');
	},

	events: {
		"click #faltacursar-subject-table tr": 'clickOnRow',
		"click #faltacursar-subject-table .ementaButton": 'clickOnEmenta'
	},

	handleOptativa: function(row) {
		var codOpt = $(row).attr('id');
		var nRows = faltacursarModel.getSubjectsOptativa(codOpt);		

		if ($(row).hasClass('openOptativa')) {
			$(row).removeClass('openOptativa');
			$($(row).attr('id')+' ~ tr').slice(0,nRows.length).remove();
		}
		else {
			$(row).addClass('openOptativa');
			var arr=new Array();
			this.addRowsToTable(nRows);	
		
			var formattedRows = this.subjectTable.find('tr').slice(-nRows.length);
			
			_.each(formattedRows, function(tmpRow) {
				$(tmpRow).remove();
			});

			$(formattedRows).insertAfter(row);	
		}
	},

	markAsSelected: function(subjectCode, isSelected) {
		if (!isSelected) 
			$('#'+subjectCode+' .name .selected-label').addClass('hidden');
		else
			$('#'+subjectCode+' .name .selected-label').removeClass('hidden');
		
	},

	clickOnRow: function(e) {
		var row=$(e.target).parent('tr');

		if ($(row).hasClass('optativa'))
			return this.handleOptativa(row);

		if ($(row.find('td').first()).hasClass('dataTables_empty'))
			return;

		if ($(row).hasClass('subjectSelected')) {
			$(row).removeClass('subjectSelected');
        		
			$(this.subjectTableWrapper).addClass('whole')
						.removeClass('half');
			this.calculateTableScroll();		
			$(this.classesDiv).addClass('hidden');
		}
		else {
			$(this.subjectTable).find('tr.subjectSelected')
				.removeClass('subjectSelected');
			$(row).addClass('subjectSelected');
			
			$(this.subjectTableWrapper).addClass('half')
						.removeClass('whole');
			this.calculateTableScroll();		

        		$(this.classesDiv).removeClass('hidden');
			$(this.classesDiv).addClass('almostHalf');				

			var id=$(row).attr('id');

			var classModel = faltacursarModel.getSubjectClasses(id).sort(
				function(a,b)
				{
					if(a.code > b.code) return 1;
					if(a.code < b.code) return -1;
					return 0;
				});
			faltacursarClasseslistView.render(
				classModel	
			);
			faltacursarClasseslistView.resize();
			this.calculateScrollTop(row);
		}
	},

	clickOnEmenta: function(e) {
		e.stopPropagation();
	},

	resize: function() {
		if (!this.subjectDatatable)
			this.subjectDatatable = $('#faltacursar-subject-table').dataTable();
		this.subjectDatatable.fnAdjustColumnSizing(false);
		this.calculateTableScroll();
	},

	calculateScrollTop: function(row) {
		var rIndex = this.subjectDatatable.fnGetPosition($(row)[0]);
		var w=0;

		$(this.subjectTableBody).find('tr').slice(0,rIndex+1).each(function(index) {
			w+=$(this).height();
		});

		$(this.subjectTableBody).scrollTop(w);
	},

	calculateTableScroll: function() {
		var h = $(this.subjectTableWrapper).height();				
		var headerH = $(this.subjectTableFilter).outerHeight(true)+
			$(this.subjectTableHeader).outerHeight(true);

		var notHeight = $(this.subjectTableBody).outerHeight(true)-
			$(this.subjectTableBody).height();
		$(this.subjectTableBody).height(h-headerH-notHeight);
	
	},

	initJS: function() {
		var me = this;

		this.subjectDatatable = $('#faltacursar-subject-table').dataTable({
			'sDom': 'ft',
			'bPaginate': false,
			'bScrollCollapse': true,
			'sScrollY': '200px',
			'bSort': false,
			'oLanguage': {
				'sZeroRecords': subjectTableStringsModel.get('noResultsStr')
			},
			'fnDrawCallback': function(oSettings) {
				me.calculateTableScroll()
			}
		});
		
		$('#faltacursar-subject-table_wrapper').addClass('whole');
	},		

	markSavedSelected: function() {
		var selected = selectedModel.getData();

		for (var i=0; i<selectedModel.maxRows; i++)
			for (var j=0; j<selectedModel.nOptions; j++)
				if (selected[i][j])
					this.markAsSelected(selected[i][j].subjectCode, true);
	},

	addRowsToTable: function(subjectArray) {
		for(idx in subjectArray) {
			var newTr = this.templateRow({
					subject: subjectArray[idx],
					subjectTableStr: subjectTableStringsModel,
				});
			this.subjectDatatable.fnAddTr($(newTr)[0],false);
		}
		
		this.subjectDatatable.fnAdjustColumnSizing(true);
	},

	render: function() {
		var subjects = faltacursarModel.getTableRows().sort
		(function(a,b){
			if(a.term != b.term)
				return a.term - b.term;
			return a.code - b.code;
		});

		this.$el.html(this.template({
			subjectTableStr: subjectTableStringsModel
		}));
		this.initJS();
		this.cache();
		
		this.addRowsToTable(subjects);
		faltacursarClasseslistView.setElement('#faltacursar-classes-div');

		this.subjectDatatable.fnAdjustColumnSizing(false);
		this.calculateTableScroll();
		this.markSavedSelected();
	}
});

var faltacursarView = new FaltacursarView();
var MicrohorarioView = Backbone.View.extend ({
	template: '',
	waitingTemplate: '',
	noQueryTemplate: '',
	resultsDiv: '',

	//status constants
	noQueryState: 'noQuery',
	queryState: 'query',
	waitingState: 'waiting',

	events: {
		"click #moreFiltersButton": "moreFilters",
		"click #lessFiltersButton": "lessFilters",
		"click #openFiltersButton": "openFilters",
		"click #closeFiltersButton": "closeFilters",
		"submit #microhorario-form": "query",
		"reset #microhorario-form" : "clear"
	},

	//Event handlers
	moreFilters: function() {
		$('#hiddenFilters').removeClass('hidden');
		$('#lessFiltersButton').removeClass('hidden');
		$('#moreFiltersButton').addClass('hidden');
		
		microhorarioClasseslistView.resize();
	},
	
	lessFilters: function() {
		$('#hiddenFilters').addClass('hidden');
		$('#lessFiltersButton').addClass('hidden');
		$('#moreFiltersButton').removeClass('hidden');
		
		microhorarioClasseslistView.resize();
	},

	openFilters: function() {
		$('#microhorario-filter').removeClass('hidden');
		$('#openFiltersButton').addClass('hidden');
		$('#closeFiltersButton').removeClass('hidden');

		microhorarioClasseslistView.resize();
	},

	closeFilters: function() {
		$('#microhorario-filter').addClass('hidden');
		$('#openFiltersButton').removeClass('hidden');
		$('#closeFiltersButton').addClass('hidden');
		
		microhorarioClasseslistView.resize();
	},

	searchFor: function(day, initTime, subjectCode) {
		this.clear();

		if (day==null) day='';
		if (initTime==null) initTime='';
		if (subjectCode==null) subjectCode='';
	
		$('input[name="HoraInicial"]').attr('value',initTime);
		$('select[name="DiaSemana"]').find('option[value="'+day+'"]').attr('selected',true);
		$('input[name="CodigoDisciplina"]').attr('value',subjectCode);
		
		mainRouter.navigate('microhorario', {trigger: true});
		this.openFilters();
		this.query();
	},

	query: function() {
		this.changeState(this.waitingState);
		microhorarioController.fetchData(true);
		return false;		
	},

	clear: function() {
		$('input[type="text"]').attr('value','');
		$('select[name="DiaSemana"]').find('option').attr('selected',false);
		$('select[name="DiaSemana"]').find('option[value=""]').attr('selected',true);
		$('input[type="checked"]').attr('checked',false);

		this.changeState(this.noQueryState);
	},

	setFiltersState: function() {
		if ($('#hiddenFilters').find('input:checked, input[type="text"][value!=""],\
				option[value!=""]:selected').length!=0)
			this.moreFilters();
		else
			this.lessFilters();
	},

	initialize: function() {
		this.template = _.template($('#microhorario-template').html());
		this.waitingTemplate = _.template($('#microhorario-waiting-template').html());
		this.noQueryTemplate = _.template($('#microhorario-noquery-template').html());
	},

	changeState: function(qState, data) {
		if (typeof data == undefined) data=[];

		if (qState==this.queryState) {
			this.setFiltersState();
			microhorarioClasseslistView.render(data);
			return;			
		}

		if (qState==this.noQueryState)
			this.$resultsDiv.html(this.noQueryTemplate({
				str: microhorarioStringsModel
			}));
		else 
			this.$resultsDiv.html(this.waitingTemplate({
				str: microhorarioStringsModel
			}));
	},

	resize: function() {
		microhorarioClasseslistView.resize();
	},

	bindValidators: function() {
		$('input[name="Creditos"]').change(function(ev) {
			microhorarioValidator.intMask(ev.target,3);
		});

		$('input[name="HoraInicial"]').change(function(ev) {
			microhorarioValidator.hourMask(ev.target);
		});

		$('input[name="HoraFinal"]').change(function(ev) {
			microhorarioValidator.hourMask(ev.target);
		});
	},

	render: function() {
		this.$el.html(this.template({
			str: microhorarioStringsModel,
			timetableStr: timetableStringsModel
		}));
		
		this.$resultsDiv = $('#microhorario-results');
		microhorarioClasseslistView.setElement(this.$resultsDiv);
	
		this.bindValidators();	
		this.changeState(this.noQueryState);		
	}
});

var microhorarioView = new MicrohorarioView();
var SelectedView = Backbone.View.extend({
	templateRow: '',
	templateTable: '',
	templateDraggable: '',

	initialize: function() {
		this.templateRow = _.template($('#selected-row-template').html());
		this.templateTable = _.template($('#selected-table-template').html());
		this.templateDraggable = _.template($('#selected-draggable-template').html());
	},

	events: {
		'click button.close': 'deleteClass',
		'change input[type="radio"]': 'radioChange'
	},

	radioChange: function(e)
	{
		var td = $(e.target).parent();
		var tr = $(td).parent();
		var trIdx = $('#main-selected-div tbody tr').index(tr);

		selectedController.runSimulation(trIdx);
	},

	resize: function() {},

	equalDroppables: function() {
		var $tr = this.$el.find('tbody tr').first();
		var w = $tr.width();
		var occupy=0;

		var $tds = $tr.find('td.classDroppable').each(function(index) {
			occupy+=$(this).width();
		});

		var perc = Math.ceil((100.*occupy)/(3.*w));
		$tds.css('width',perc+'%');
	},

	deleteClass: function(e) {
		var button = e.target;
		var div = $(e.target).parent('div');

		var subjectCode = $(div).find('input[type="hidden"][name="subjectCode"]').attr('value');
		var classCode = $(div).find('input[type="hidden"][name="classCode"]').attr('value');
		selectedModel.removeClass(subjectCode, classCode);

		this.equalDroppables();
	},

	buildRow: function(index, classArray) {
		var arr=new Array();

		for (var i=0; i<classArray.length; i++)
			if (classArray[i])
				arr[i]=(this.templateDraggable(classArray[i]));
	
		return	this.templateRow({
			'index': index,
			'options': classArray,
			'template': arr
		});
	},

	buildSelected: function(rowsArray) {
		this.$el.html(this.templateTable({
			selectedStr: selectedStringsModel
		}));
		var tbody = this.$el.find('tbody');

		for (var i=0; i<rowsArray.length; i++)
			$(tbody).append(this.buildRow(i,rowsArray[i]));
	
		for (var i=rowsArray.length; i<selectedModel.maxRows; i++)
			$(tbody).append(this.buildRow(i,[]));
	},

	render: function() {
		this.buildSelected(selectedModel.getData());
		this.initJS();
	},

	sortableInit: function() {
		var me=this;

		this.$el.find('tbody.selectedSortable').sortable({
			//Based on http://stackoverflow.com/questions/1307705/jquery-ui-sortable-with-table-and-tr-width/1372954#1372954
	
			helper: function(e, tr) {
				var $originals = tr.children();
    				var $helper = tr.clone();

				$helper.children().each(function(index)
    				{
      					$(this).width($originals.eq(index).width())
    					$(this).height($originals.eq(index).height());
				});
    				return $helper;
  			},	
		
			//Based http://www.ilovecolors.com.ar/preserving-radio-button-checked-state-during-drag-and-drop-jquery/
			start: function (e, ui) {
        			var radio_checked= {};

				me.$el.find('input[type="radio"]', this).each(function(){
					if($(this).is(':checked'))
						radio_checked[$(this).attr('name')] = $(this).val();
					$(document).data('radio_checked', radio_checked);
				});

			}
		}).bind('sortstop', function (event, ui) {
			var radio_restore = $(document).data('radio_checked');

			$.each(radio_restore, function(index, value){
				$('input[name="'+index+'"][value="'+value+'"]').prop('checked', true);
			});

			selectedController.sortLines();
			selectedController.runSimulation();
		});
	},

	draggableInit: function() {
		this.$el.find('div.classDraggable').draggable({
			revert: 'invalid',
			zIndex: 1000
		});
	},

	droppableInit: function() {
		var $drop = this.$el.find('td.classDroppable').droppable({
			drop: function(event, ui) {
				selectedController.swapPlaces($(this), $(ui.draggable).parent());
				
				if ($(this).has('div.classDraggable')) {
					$(ui.draggable).parent().append(
						$(this).find('div.classDraggable')
					);
				}			

				$(ui.draggable).css({
					'left': '0px',
					'right': '0px',
					'top': '0px',
					'bottom': '0px'
				});
				$(this).append($(ui.draggable));

				selectedController.runSimulation();
			},
			accept: '.classDraggable'
		});
	},	

	initJS: function() {
		this.sortableInit();
		this.draggableInit();
		this.droppableInit();
	}
});

var selectedView = new SelectedView();
var MainView = Backbone.View.extend({
	el: '',
	template: '',
	rendered: false,
	
	tabs: {'faltacursar': {
			'li': 'main-faltacursar-li',
			'div': 'main-faltacursar-div',
			'href': '#faltacursar',
			'view': faltacursarView
		}, 
		'microhorario': {
			'li': 'main-microhorario-li',
			'div': 'main-microhorario-div',
			'href': '#microhorario',
			'view': microhorarioView
		},
		'selected': {
			'li': 'main-selected-li',
			'div': 'main-selected-div',
			'href': '#selected',
			'view': selectedView
		}},

	defaultTab: 'faltacursar',		

	//Cached variables
	timetableDiv: '',
	sidebarDiv: '',
	tabsNav: '',

	initialize: function() {
		this.template = _.template($('#main-template').html());
		var me = this;
	
		$(window).resize(function() {
			me.equalMainDivsHeight();
		});
	},
	
	cache: function() {
		this.timetableDiv = document.getElementById('main-timetable-div');
		this.sidebarDiv = document.getElementById('main-sidebar-div');
		this.tabsNav = document.getElementById('main-tabs-nav');
	},

	equalMainDivsHeight: function() {
		var h = $(this.timetableDiv).height();
		$(this.sidebarDiv).height(h);

		var innerH = h-$(this.tabsNav).height();
		faltacursarView.$el.height(innerH);
		microhorarioView.$el.height(innerH);
		selectedView.$el.height(innerH);
	},	

	setActiveTab: function(tab) {
		$('#main-tabs-nav li').removeClass('active');
		$('#main-tab-panes div').removeClass('active');

		$('#'+this.tabs[tab].li).addClass('active');
		$('#'+this.tabs[tab].div).addClass('active');
	
		this.tabs[tab].view.resize();

		if (tab=='selected')
			selectedModel.set('addedSinceLastView',0);
	},

	changeBadge: function(qtd) {
		if (!qtd) 
			$('#selected-badge').addClass('hidden');
		else {
			$('#selected-badge').html(qtd);
			$('#selected-badge').removeClass('hidden');
		}
	},

	renderSubviews: function() {
		timetableView.setElement('#main-timetable-div');
		timetableView.render();

		faltacursarView.setElement('#main-faltacursar-div');
		faltacursarView.render();

		microhorarioView.setElement('#main-microhorario-div');
		microhorarioView.render();

		selectedView.setElement('#main-selected-div');
		selectedView.render();		
	},

	render: function() {
		this.$el.html(this.template({
			tabs: this.tabs,
			mainStr: mainStringsModel
		}));
		
		this.renderSubviews();
		this.rendered=true;

		this.cache();
		this.equalMainDivsHeight();
	}
});

var mainView = new MainView();
var ClasseslistView = Backbone.View.extend({
	templateTable: '',
	templateRow: '',
	el: '',
	subjectInfo: '',

	//Cached
	classesDatatable: null,
	classesTableHead: '',
	classesTableBody: '',

	events: {
		'click .dataTables_scrollBody tr': 'clickOnClass'
	},

	clickOnClass: function(e) {
		var row = $(e.target).parent('tr');
		
//		if ($(row).hasClass('subjectBlocked'))
//			return;
		if ($(row).hasClass('subjectDisabled'))
			return;
		if ($(row.find('td').first()).hasClass('dataTables_empty'))
			return;

		var subjectCode = $(row).find('input[type="hidden"][name="subjectCode"]').attr('value');
		var classId = $(row).find('input[type="hidden"][name="classId"]').attr('value');

		if ($(row).hasClass('classChosen')) {
			$(row).removeClass('classChosen');
			selectedModel.removeClass(subjectCode,classId);

			if (selectedModel.get('addedSinceLastView')>0)
				selectedModel.set('addedSinceLastView',
					selectedModel.get('addedSinceLastView')-1);
		}
		else {
			$(row).addClass('classChosen');
			selectedModel.addClass(subjectCode,classId);
		
			selectedModel.set('addedSinceLastView',
				selectedModel.get('addedSinceLastView')+1);
		}
	},

	changeRow: function(subjectCode, classId, select) {
		this.$el.find('tr').each(function() {		
			var _subjectCode = $(this).find('input[type="hidden"][name="subjectCode"]').attr('value');
			var _classId = $(this).find('input[type="hidden"][name="classId"]').attr('value');	

			if (_subjectCode==subjectCode && _classId==classId) {
				if (select) $(this).addClass('classChosen');
				else $(this).removeClass('classChosen');
			}
		});
	},

	markChosenRows: function() {
		var ch = selectedModel.getData();

		for (var i=0; i<selectedModel.maxRows; i++)
			for (var j=0; j<selectedModel.nOptions; j++)
				if (ch[i][j]) this.changeRow(ch[i][j].subjectCode, ch[i][j].classId, true);
	},

	cache: function() {
		this.classesTableHead = this.$('.dataTables_scrollHead');
		this.classesTableBody = this.$('.dataTables_scrollBody');
	},

	resize: function() {
		if (this.classesDatatable)
			this.classesDatatable.fnDraw(false);
	},

	calculateTableScroll: function() {},

	initialize: function() {
		this.templateTable = _.template($('#classeslist-template').html());
		this.templateRow = _.template($('#classeslist-row-template').html());
	},

	initJS: function() {
		var me = this;

		this.classesDatatable = this.$el.find('table').dataTable({			
			'sDom': this.options.sDom,
			'bPaginate': false,
			'bScrollCollapse': true,
			'sScrollY': '100px',
			'bSort': false,
			'oLanguage': {
				'sEmptyTable': classesTableStringsModel.get('emptyTableStr')
			},
			'fnDrawCallback': function(oSettings) {
				me.calculateTableScroll();
			}
		});
	},

	addRowsToTable: function(classesArray) {
		for(idx in classesArray) {
			var newTr = this.templateRow({
					classO: classesArray[idx],
					classesTableStr: classesTableStringsModel,
					subjectInfo: this.subjectInfo
				});
			this.classesDatatable.fnAddTr($(newTr)[0],false);
		}
		
		this.classesDatatable.fnAdjustColumnSizing(true);
	},

	render: function(classesArray) {
		this.$el.html(this.templateTable({
			classesTableStr: classesTableStringsModel,
			subjectInfo: this.subjectInfo
		}));	

		this.initJS();
		this.cache();
		
		this.addRowsToTable(classesArray);
		this.markChosenRows();
		this.calculateTableScroll();
	}
});

var MicrohorarioClasseslistView = ClasseslistView.extend({
	subjectInfo: true,
	waitingData: false,
	waitingTemplate: '',
	alertTemplate: '',
	endOfDataMsg: false,

	initialize: function() {
		this.templateTable = _.template($('#classeslist-template').html());
		this.templateRow = _.template($('#classeslist-row-template').html());
		this.waitingTemplate = _.template($('#microhorario-waiting-template').html());
		this.alertTemplate = _.template($('#microhorario-end-of-data-template').html());
	},

	addNextPage: function(end, data) {
		$(this.classesTableBody).find('div').remove();
		
		if (end) {
			$(this.classesTableBody).append(this.alertTemplate({
				str: microhorarioStringsModel
			}));
			this.endOfDataMsg=true;
		}
		else this.addRowsToTable(data);	

		this.waitingData=false;
	},

	bindEndOfScroll: function() {
		var me=this;

		this.$el.find('.dataTables_scrollBody').scroll(function() {
			if (!$(this).scrollTop())
				return;
			if($(this).scrollTop() + $(this).innerHeight()
					== $(this)[0].scrollHeight) {

				if (me.waitingData) return;
			
				me.waitingData=true;
				var div = document.createElement('div');
				$(div).html(me.waitingTemplate({
					str: microhorarioStringsModel 
				}));
				
				$(me.classesTableBody).append(div);
				microhorarioController.fetchData(false);
			}
		});
	},

	calculateTableScroll: function() {
		var h=0;
		if (!$('#microhorario-filter').hasClass('hidden'))
			h+=$('#microhorario-filter').outerHeight(true);
		h+=$('#microhorario-togglefilter').outerHeight(true);
	
		var diff = $(this.el).outerHeight(true)-$(this.el).height();
		var totH = $(this.el).parent().height()-h-diff;
	
		$(this.el).height(totH);
		var headH = $(this.classesTableHead).outerHeight();
		$(this.classesTableBody).height(totH-headH);

		this.bindEndOfScroll();
	}
});
var microhorarioClasseslistView = new MicrohorarioClasseslistView({sDom: 't'});

var FaltacursarClasseslistView = ClasseslistView.extend({
	subjectInfo: false,

	calculateTableScroll: function() {
		var h = this.$el.height();
		var headerH= this.$el.find('.dataTables_filter').outerHeight(true)+
			$(this.classesTableHead).outerHeight(true);
		var diff = $(this.classesTableBody).outerHeight(true)-
			$(this.classesTableBody).height();

		$(this.classesTableBody).height(h-headerH-diff);
	},
});
var faltacursarClasseslistView = new FaltacursarClasseslistView({sDom: 'ft'});
function MicrohorarioController() {
	var formEl = '#microhorario-form';
	var url = '/api/microhorario';
	var defaultQtd=10;
	var formquerystring;
	
	this.end=false;
	this.nextPage=0;

	var me=this;
	
	var completeQueryStr = function() {
		return formquerystring+'&Pagina='+me.nextPage+'&Quantidade='+
			defaultQtd;
	}

	this.fetchData = function(newSearch) {
		if (newSearch) {
			formquerystring = $(formEl).serialize();
			me.nextPage=0; me.end=false;
		}
		if (me.end) 
			return microhorarioClasseslistView.addNextPage(me.end);
		
		console.log(completeQueryStr());
		
		$.ajax({
			url: url,
			type: 'GET',
			data: completeQueryStr(),
			dataType: 'json',

			success: function(data) {
				if (newSearch)
					me.buildTable(data);
				else
					me.addRows(data);
				me.nextPage++;
			}
		});
	}
	
	var formatData = function(data) {
		subjectList.add(data[serverDictionary.get('Dependencia')]);
		var array = new Array();		

		_.each(data[serverDictionary.get('MicroHorario')], function(classO) {
			var subjectModel = subjectList.get(
				classO[serverDictionary.get('CodigoDisciplina')]
			);
			var classModel = subjectModel.get('Turmas')
				.get(classO[serverDictionary.get('PK_Turma')]);

			var object={
				'subjectCode': subjectModel.get('CodigoDisciplina'),
				'subjectName': subjectModel.get('NomeDisciplina'),
				'professorName' : classModel.get('NomeProfessor'),
				'schedule': classModel.printSchedule(),
				'code': classModel.get('CodigoTurma'),
				'classId': classModel.get('PK_Turma'),
				'status': subjectModel.get('Situacao'),
				'able': subjectModel.get('Apto')
			};

			array.push(object);
		});

		return array;
	}

	this.buildTable = function(data) {
		var array = formatData(data);	
		microhorarioView.changeState(microhorarioView.queryState,array);
	}

	this.addRows = function(data) {
		var array = formatData(data);
		
		if (array.length==0)	
			me.end=true;
		microhorarioClasseslistView.addNextPage(me.end,array);
	}
}

var microhorarioController = new MicrohorarioController();

function MicrohorarioValidator() {
	var me=this;

	this.getInt = function(value, length) {
		var nVal = "";

		for (var i=0; i<value.length; i++)
			if (!isNaN(value[i])) {
				nVal+=value[i];

				if (length>0 && nVal.length==length)
					break;
			}

		return nVal;
	}

	this.intMask = function(inputObj, length) {
		inputObj.value = me.getInt(inputObj.value, length);
	}

	this.hourMask = function(inputObj) {
		var val=inputObj.value;
		var colon=-1;

		for (var i=0; i<val.length; i++)
			if (val[i]==':') {
				colon=i;
				break;
			}
		
		if (colon>=0) val=val.substr(0,colon);
		inputObj.value = me.getInt(val, 2);
	}
}

var microhorarioValidator = new MicrohorarioValidator();
function SelectedController() {
	var collidesTime = function(class1Model, class2Model) {
		var times1 = class1Model.get('Horarios').models;
		var times2 = class2Model.get('Horarios').models;

		var gud = true;
		for(var time1Idx in times1)
		{
			var time1 = times1[time1Idx];
			if (!time1.get('DiaSemana'))
				continue;

			for(var time2Idx in times2)
			{
				var time2 = times2[time2Idx];
				if (!time2.get('DiaSemana'))
					continue;

				if(time1.get('DiaSemana') == time2.get('DiaSemana'))
				{
					var hi1, hi2, hf1, hf2;
					hi1 = time1.get('HoraInicial');
					hi2 = time2.get('HoraInicial');
					hf1 = time1.get('HoraFinal');
					hf2 = time2.get('HoraFinal');
					if(hi1 > hi2)
					{
						var s = hi1;
						hi1 = hi2;
						hi2 = s;

						s = hf1;
						hf1 = hf2;
						hf2 = s;
					}

					if(hf1 > hi2)
					{
						gud = false;
						break;
					}
				}
			}
			if(!gud) break;
		}
		return !gud;
	}

	this.runSimulation = function(rowIdx) {
		var accepted= new Array();

		if(rowIdx == undefined || rowIdx < 0) rowIdx = 0;

		var rows = $('#main-selected-div tbody tr');
		var rowCount = 0;
		var creditos = 0;

		_.each(rows, function(row){
			if(rowCount > rowIdx)
			{
				$(row).find('input[type="radio"]').first().attr('checked', true);
			}

			while(1)
			{
				var radioValue = $(row).find('input[type="radio"]:checked').attr('value');

				if(radioValue == 'none')
				{
					break;
				}

				var option = $(row).find('input[type="radio"]:checked').parent('td').next();

				if($(option).find('div').length != 0)
				{
					var classId = $(option).find('input[type="hidden"][name="classCode"]').attr('value');
					var subjectCode = $(option).find('input[type="hidden"][name="subjectCode"]').attr('value');
					var classModel = subjectList.get(subjectCode).get('Turmas').get(classId);
					var subjectCreditos = subjectList.get(subjectCode).get('Creditos');
					
					var gud = true;
					for(var classIdx in accepted)
					{
						var times = classModel.get('Horarios');					
						var accClassModel = subjectList.getClass(accepted[classIdx].subjectCode, 
											accepted[classIdx].classId);	

						if(subjectCode == accepted[classIdx].subjectCode || collidesTime(classModel, accClassModel))
						{
							gud = false;
							break;
						}
					}

					if(gud && (creditos+subjectCreditos)<=30)
					{
						var cssClass="";
						for (var i=0; i<selectedModel.maxRows; i++)
							if ($(row).hasClass('row'+i)) {
								cssClass=i;
								break;
							}

						creditos += subjectCreditos;

						accepted.push({
							classId: classId,
							subjectCode: subjectCode,
							cssClass: cssClass
						});
						break;
					}
				}

				$(option).next().find('input[type="radio"]').attr('checked',true);
			}

			rowCount++;
		});

		console.log('Quantidade de creditos: '+creditos);
		timetableView.render(accepted);
	}

	var getValues = function(td) {
		if ($(td).find('div').length==0)
			return null;
		
		var classId = $(td).find('input[type="hidden"][name="classCode"]').attr('value');
		var subjectCode = $(td).find('input[type="hidden"][name="subjectCode"]').attr('value');
	
		return {'subjectCode': subjectCode, 'classId': classId,
			'classCode': subjectList.get(subjectCode).get('Turmas').get(classId).get('CodigoTurma')};
	}

	this.sortLines = function() {
		var state = new Array();
		for (var i=0; i<selectedModel.maxRows; i++)
			state[i]=new Array();

		var rows = $('#main-selected-div tbody tr');
		var i=0;

		_.each(rows, function(row) {
			var tds = $(row).find('.classDroppable');	
			var j=0;	

			_.each(tds, function(td) {
				state[i][j]=getValues(td);
				j++;
			});

			i++;
		});

		selectedModel.setAll(state);
	}

	this.swapPlaces = function(tdA, tdB) {
		var ai, bi, aj, bj;

		var rows = $('#main-selected-div tbody tr');
		ai = $(rows).index($(tdA).parent());			
		bi = $(rows).index($(tdB).parent());			

		aj = $($(tdA).parent().children('.classDroppable')).index(tdA);
		bj = $($(tdB).parent().children('.classDroppable')).index(tdB);

		selectedModel.swapContent(ai,aj,bi,bj);
	}	
}

var selectedController = new SelectedController();
var MainRouter = Backbone.Router.extend({
	routes: {
		'': 'main',
		':tab': 'tabs'
	},

	loadPage: function() {
		serverDictionary.set(DATA_VIEW.Dicionario);

		layoutStringsModel.set('userName', 
			DATA_VIEW.Data[serverDictionary.get('Usuario')][serverDictionary.get('NomeAluno')]);

		subjectList.add(DATA_VIEW.Data[serverDictionary.get('Dependencia')]);
		faltacursarModel.set(DATA_VIEW.Data[serverDictionary.get('FaltaCursar')]);
		selectedModel.setFromServer(DATA_VIEW.Data[serverDictionary.get('Selecionadas')]);

		layoutView.contentView=mainView;
		layoutView.loggedIn=true;
		layoutView.render();

		mainView.render();
		selectedController.runSimulation();
	}
});

var mainRouter = new MainRouter();

mainRouter.on('route:main', function() {
	this.loadPage();
	mainRouter.navigate(mainView.defaultTab,
		{trigger: true});
});

mainRouter.on('route:tabs', function(tab) {
	if (!mainView.tabs[tab])
		return mainRouter.navigate(mainView.defaultTab,
			{trigger: true, replace: true});
	
	if (!mainView.rendered)
		this.loadPage();
	mainView.setActiveTab(tab);
});

//if (history.pushState) { 
//	console.log("pushState supported");
//	Backbone.history.start({pushState: true});
//}
//else {
//	console.log("pushState NOT supported");
	Backbone.history.start();
//}
