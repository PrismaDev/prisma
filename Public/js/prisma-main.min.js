var MicrohorarioModel = Backbone.Model.extend({
	url: '/api/microhorario/?Pagina=1&Quantidade=50',
	saveToLocal: function() {}
});
var TimetableView = Backbone.View.extend({
	template: '',
	startH: 7,
	endH: 23,
	ndays: 6,

	testArray: [
		{
			'nome': 'A',
			'horarios': [
			{
				'diaSemana': 0,
				'horaInicial': 7,
				'horaFinal': 11
			},
			{
				'diaSemana': 2,
				'horaInicial': 7,
				'horaFinal': 11	
			}]
		},
		{
			'nome': 'B',
			'horarios': [
			{
				'diaSemana': 1,
				'horaInicial': 9,
				'horaFinal': 10
			},
			{
				'diaSemana': 2,
				'horaInicial': 13,
				'horaFinal': 15	
			}]
		}

	],

	initialize: function() {
		this.template = _.template($('#timetable-template').html());
	},

	processArray: function(classesArray) {
		var timetableMatrix = new Array();

		for (var hour=this.startH; hour<this.endH; hour++) {
			timetableMatrix[hour] = new Array();

			for (var day=0; day<this.ndays; day++)
				timetableMatrix[hour][day] = {
					'string':'',
					'span': 1,
					'customClass': null
				}
		}

		for (var i=0; i<classesArray.length; i++)
			for (var j=0; j<classesArray[i].horarios.length; j++) {
				var d=classesArray[i].horarios[j].diaSemana;
				var s=classesArray[i].horarios[j].horaInicial;
				var e=classesArray[i].horarios[j].horaFinal;

				timetableMatrix[s][d].string=classesArray[i].nome;
				timetableMatrix[s][d].span=Number(e)-Number(s);
				timetableMatrix[s][d].customClass='ttclass'+i;

				for (var k=s+1; k<e; k++) {
					timetableMatrix[k][d].span=0;
					timetableMatrix[k][d].customClass='ttclass'+i;
				}
			}

		return timetableMatrix;
	},

	buildTableBody: function(classesArray) {
		if (typeof classesArray == undefined)
			classesArray=[];

		var ttmat = this.processArray(classesArray);		
		var tbody = document.createElement('tbody');

		for (var hour=this.startH; hour<this.endH; hour++) {
			var tr = document.createElement('tr');
			$(tr).append('<td class="text-top">'+hour+':00</td>');

			for (var day=0; day<this.ndays; day++) {
				if (ttmat[hour][day].span==0)
					continue;

				var td = document.createElement('td');
				var div = document.createElement('div');

				div.innerHTML = ttmat[hour][day].string;
				
				if (ttmat[hour][day].customClass)
					$(td).addClass(ttmat[hour][day].customClass);
			
				td.rowSpan=ttmat[hour][day].span;

				td.appendChild(div);
				tr.appendChild(td);
			}
			$(tbody).append(tr);
		}

		return $(tbody).html();
	},

	resizeW: function() {},
	resizeH: function() {},

	fetchData: function(classesArray) {
		return {days: ['Segunda', 'Terca', 'Quarta', 'Quinta',
				'Sexta', 'Sabado'],
				startH: 7, endH: 23,
				timetableBody: 
					this.buildTableBody(classesArray)		
			};
	},

	render: function(classesArray) {
		if (!classesArray) classesArray = this.testArray;
		this.$el.html(this.template(this.fetchData(classesArray)));
	}
});

var timetableView = new TimetableView();
var FaltacursarView = Backbone.View.extend({
	template: '',
	subjectDatatableView: '',

	//Cached variables
	subjectTableWrapper: '',
	classesDiv: '',
	subjectTable: '',
	subjectDatatable: '',
	subjectTableFilter: '',
	subjectTableHeader: '',	
	subjectTableBody: '',	

	testArray: [
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'},
		{'subjectCode':'coisa', 'subjectName':'coisa', 'professorName': 'coisa', 'code': 'coisa', 'schedule': 'coisa'}
	],


	initialize: function() {
		this.template = _.template($('#faltacursar-template').html());
		var me=this;
		$(window).resize(function() {
			me.resize();
		});
	},

	cache: function() {
		this.subjectTableWrapper = $('#faltacursar-subject-table_wrapper');
		this.classesDiv = $('#faltacursar-classes-div');
		this.subjectTable = $('#faltacursar-subject-table');
		this.subjectTableFilter = $('#faltacursar-subject-table_wrapper\
					 .dataTables_filter');
		this.subjectTableHeader = $('#faltacursar-subject-table_wrapper\
					 .dataTables_scrollHead');
		this.subjectTableBody = $('#faltacursar-subject-table_wrapper\
					 .dataTables_scrollBody');
	},

	events: {
		"click #faltacursar-subject-table tr": 'clickOnRow',
		"click #faltacursar-subject-table .ementaButton": 'clickOnEmenta'
	},

	clickOnRow: function(e) {
		var row=$(e.target).parent('tr');

		if ($(row).hasClass('row_selected')) {
			$(row).removeClass('row_selected');
        		
			$(this.subjectTableWrapper).addClass('whole')
						.removeClass('half');
			this.calculateTableScroll();		
			$(this.classesDiv).addClass('hidden');
		}
		else {
			$(this.subjectTable).find('tr.row_selected')
				.removeClass('row_selected');
			$(row).addClass('row_selected');
			
			$(this.subjectTableWrapper).addClass('half')
						.removeClass('whole');
			this.calculateTableScroll();		

        		$(this.classesDiv).removeClass('hidden');
			$(this.classesDiv).addClass('almostHalf');				

			faltacursarClasseslistView.resize();
		}
	},

	clickOnEmenta: function(e) {
		e.stopPropagation();
	},

	resize: function() {
		if (!this.subjectDatatable)
			this.subjectDatatable = $('#faltacursar-subject-table').dataTable();
		this.subjectDatatable.fnAdjustColumnSizing(false);
		this.calculateTableScroll();
	},

	calculateTableScroll: function() {
		var h = $(this.subjectTableWrapper).height();				
		var headerH = $(this.subjectTableFilter).outerHeight(true)+
			$(this.subjectTableHeader).outerHeight(true);

		var notHeight = $(this.subjectTableBody).outerHeight(true)-
			$(this.subjectTableBody).height();
		$(this.subjectTableBody).height(h-headerH-notHeight);
	},

	initJS: function() {
		var me = this;

		this.subjectDatatable = $('#faltacursar-subject-table').dataTable({
			'sDom': 'ft',
			'bPaginate': false,
			'bScrollCollapse': true,
			'sScrollY': '200px',
			'fnDrawCallback': function(oSettings) {
				me.calculateTableScroll()
			}
		});
		
		$('#faltacursar-subject-table_wrapper').addClass('whole');
	},		

	fetchStrings: function() {
		return {codeStr: 'Codigo', nameStr: 'Nome da Disciplina',
			moreInfoStr: 'Ementa', termStr: 'Periodo',
			infoStr: 'Ementa'};
	},

	fetchSubjects: function() {
		return {subjects: [
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'ENG1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'},
			{code: 'MAT1015', name: 'Teste teste teste', term: '2', link: '#'}
		]};
	},

	fetchData: function() {
		var data = $.extend({}, this.fetchStrings(),
			this.fetchSubjects());
		return data;
	},

	render: function() {
		this.$el.html(this.template(this.fetchData()));
		this.initJS();

		this.cache();
		faltacursarClasseslistView.setElement('#faltacursar-classes-div');
		faltacursarClasseslistView.render(this.testArray);

		this.subjectDatatable.fnAdjustColumnSizing(false);
		this.calculateTableScroll();
	}
});

var faltacursarView = new FaltacursarView();
var MicrohorarioStringsModel = Backbone.Model.extend({
	defaults: {
		'openFiltersStr': 'Abrir filtros',
		'closeFiltersStr': 'Fechar filtros',
		'subjectCodeLabel': 'Código da disciplina',
		'subjectNameLabel': 'Nome da disciplina',
		'professorNameLabel': 'Professor',
		'moreFiltersStr': 'Mais filtros',
		'lessFiltersStr': 'Menos filtros',
		'toggleBlockedDisabledLabel': 'Exibir disciplinas cursadas ou bloqueadas',
		'noQueryStr': 'Não foi feita nenhuma busca',
		'nCreditsLabel': 'Nº de créditos',
		'targetBlockLabel': 'Bloqueio',
		'dayLabel': 'Dia da semana',
		'timeBeginLabel': 'Horário de início',
		'timeEndLabel': 'Horário de término',
		'noFixedScheduleLabel': 'Sem horário fixo',
		'distanceHoursLabel': 'Com horas à distância',
		'resetButtonLabel': 'Limpar campos',
		'submitButtonLabel': 'Buscar'
	}
});

var microhorarioStringsModel = new MicrohorarioStringsModel();
var MicrohorarioView = Backbone.View.extend ({
	template: '',
	waitingTemplate: '',
	noQueryTemplate: '',
	resultsDiv: '',

	//status constants
	noQueryStatus: 'noQuery',
	queryStatus: 'query',
	waitingStatus: 'waiting',

	waitingImgURL: 'http://i.stack.imgur.com/FhHRx.gif',
		
	events: {
		"click #moreFiltersButton": "moreFilters",
		"click #lessFiltersButton": "lessFilters",
		"click #openFiltersButton": "openFilters",
		"click #closeFiltersButton": "closeFilters",
		"submit #microhorario-form": "query"
	},

	//Event handlers
	moreFilters: function() {
		$('#hiddenFilters').removeClass('hidden');
		$('#lessFiltersButton').removeClass('hidden');
		$('#moreFiltersButton').addClass('hidden');
		
		microhorarioClasseslistView.resize();
	},
	
	lessFilters: function() {
		$('#hiddenFilters').addClass('hidden');
		$('#lessFiltersButton').addClass('hidden');
		$('#moreFiltersButton').removeClass('hidden');
		
		microhorarioClasseslistView.resize();
	},

	openFilters: function() {
		$('#microhorario-filter').removeClass('hidden');
		$('#openFiltersButton').addClass('hidden');
		$('#closeFiltersButton').removeClass('hidden');

		microhorarioClasseslistView.resize();
	},

	closeFilters: function() {
		$('#microhorario-filter').addClass('hidden');
		$('#openFiltersButton').removeClass('hidden');
		$('#closeFiltersButton').addClass('hidden');
		
		microhorarioClasseslistView.resize();
	},

	query: function() {
		this.changeState(this.waitingStatus);
		var microhorarioModel = new MicrohorarioModel();
		var me=this;

		microhorarioModel.fetch({
			sucess: function(microhorario) {
				me.changeState(me.queryStatus,
					microhorario);
			}
		});

		return false;		
	},

	initialize: function() {
		this.template = _.template($('#microhorario-template').html());
		this.waitingTemplate = _.template($('#microhorario-waiting-template').html());
		this.noQueryTemplate = _.template($('#microhorario-noquery-template').html());
	},

	changeState: function(qStatus, data) {
		if (typeof data == undefined) data=[];

		if (qStatus==this.queryStatus) {
			this.closeFilters();
			microhorarioClasseslistView.render(data);
			return;			
		}

		if (qStatus==this.noQueryStatus)
			this.$resultsDiv.html(this.noQueryTemplate({
				str: microhorarioStringsModel
			}));
		else 
			this.$resultsDiv.html(this.waitingTemplate({
				waitingImgURL: this.waitingImgURL
			}));
	},

	resize: function() {
		microhorarioClasseslistView.resize();
	},

	render: function() {
		this.$el.html(this.template({
			str: microhorarioStringsModel
		}));
		
		this.$resultsDiv = $('#microhorario-results');
		microhorarioClasseslistView.setElement(this.$resultsDiv);		
		microhorarioClasseslistView.render([]);
		
		this.changeState(this.noQueryStatus, this.testArray);		
	}
});

var microhorarioView = new MicrohorarioView();
var SelectedView = Backbone.View.extend({
	templateRow: '',
	templateTable: '',

	testArray: [
		[
			{subjectCode: 'aa1', classCode: 'bbb'},
			{subjectCode: 'aa2', classCode: 'bbb'}
		],
		[
			{subjectCode: 'aa3', classCode: 'bbb'}
		],
		[
			{subjectCode: 'aa4', classCode: 'bbb'},
			{subjectCode: 'aa5', classCode: 'bbb'},
			{subjectCode: 'aa6', classCode: 'bbb'}
		],
		[
			{subjectCode: 'aa7', classCode: 'bbb'},
			{subjectCode: 'aa8', classCode: 'bbb'}
		],
		[
			{subjectCode: 'aa9', classCode: 'bbb'},
			{subjectCode: 'a10', classCode: 'bbb'},
			{subjectCode: 'a11', classCode: 'bbb'}
		]
	],

	initialize: function() {
		this.templateRow = _.template($('#selected-row-template').html());
		this.templateTable = _.template($('#selected-table-template').html());
	},

	events: {
		'click button.close': 'deleteClass' 
	},

	resize: function() {},

	equalDroppables: function() {
		var $tr = this.$el.find('tbody tr').first();
		var w = $tr.width();
		var occupy=0;

		var $tds = $tr.find('td.classDroppable').each(function(index) {
			occupy+=$(this).width();
		});

		var perc = Math.ceil((100.*occupy)/(3.*w));
		$tds.css('width',perc+'%');
	},

	deleteClass: function(e) {
		var button = e.target;
		this.equalDroppables();
		button.parentNode.parentNode.removeChild(button.parentNode);
	},

	buildRow: function(index, classArray) {
		return	this.templateRow({
			'index': index,
			'options': classArray
		});
	},

	buildSelected: function(rowsArray) {
		this.$el.html(this.templateTable(this.fetchStrings()));
		var tbody = this.$el.find('tbody');

		for (var i=0; i<rowsArray.length; i++)
			$(tbody).append(this.buildRow(i,rowsArray[i]));
	},

	fetchStrings: function() {
		return {'option1Label': '1a opcao',
			'option2Label': '2a opcao',
			'option3Label': '3a opcao',
			'noneLabel': 'N/A'};
	},

	fetchData: function() { //this will be a model function
		return this.testArray;
	},

	render: function() {
		var data = this.fetchData();
		this.buildSelected(data);
		this.initJS();
	},

	sortableInit: function() {
		var me=this;

		this.$el.find('tbody.selectedSortable').sortable({
			//Based on http://stackoverflow.com/questions/1307705/jquery-ui-sortable-with-table-and-tr-width/1372954#1372954
	
			helper: function(e, tr) {
				var $originals = tr.children();
    				var $helper = tr.clone();

				$helper.children().each(function(index)
    				{
      					$(this).width($originals.eq(index).width())
    					$(this).height($originals.eq(index).height());
				});
    				return $helper;
  			},	
		
			//Based http://www.ilovecolors.com.ar/preserving-radio-button-checked-state-during-drag-and-drop-jquery/
			start: function (e, ui) {
        			var radio_checked= {};

				me.$el.find('input[type="radio"]', this).each(function(){
					if($(this).is(':checked'))
						radio_checked[$(this).attr('name')] = $(this).val();
					$(document).data('radio_checked', radio_checked);
				});

			}
		}).bind('sortstop', function (event, ui) {
			var radio_restore = $(document).data('radio_checked');

			$.each(radio_restore, function(index, value){
				$('input[name="'+index+'"][value="'+value+'"]').prop('checked', true);
			});
		});
	},

	draggableInit: function() {
		this.$el.find('div.classDraggable').draggable({
			revert: 'invalid',
			zIndex: 1000
		});
	},

	droppableInit: function() {
		var $drop = this.$el.find('td.classDroppable').droppable({
			drop: function(event, ui) {
				console.log('this:');
				console.log($(this));
				console.log('draggable:')
				console.log(ui.draggable);
				if ($(this).has('div.classDraggable')) {
					$(ui.draggable).parent().append(
						$(this).find('div.classDraggable')
					);
				}			

				$(ui.draggable).css({
					'left': '0px',
					'right': '0px',
					'top': '0px',
					'bottom': '0px'
				});
				$(this).append($(ui.draggable));
			},
			accept: '.classDraggable'
		});
	},	

	initJS: function() {
		this.sortableInit();
		this.draggableInit();
		this.droppableInit();
	}
});

var selectedView = new SelectedView();
var MainView = Backbone.View.extend({
	el: 'body',
	mainTemplate: '',
	layoutTemplate: '',
	rendered: false,
	tabs: {'faltacursar': {
			'li': 'main-faltacursar-li',
			'div': 'main-faltacursar-div',
			'str': '',
			'href': '#faltacursar',
			'view': faltacursarView
		}, 
		'microhorario': {
			'li': 'main-microhorario-li',
			'div': 'main-microhorario-div',
			'str': '',
			'href': '#microhorario',
			'view': microhorarioView
		},
		'selected': {
			'li': 'main-selected-li',
			'div': 'main-selected-div',
			'str': '',
			'href': '#selected',
			'view': selectedView
		}},

	defaultTab: 'faltacursar',		
	
	childrenViews: [
		faltacursarView,
		timetableView,
		selectedView,
		microhorarioView
	],

	//Cached variables
	timetableDiv: '',
	sidebarDiv: '',
	timetableTable: '',
	container: '',
	tabsNav: '',

	testData: {
		'hiStr': 'Olá',
		'user': {'name': 'Bobteco da Silva'},
		'logoutStr': 'Logout',
		'loggedIn': true
	},

	initialize: function() {
		this.mainTemplate = _.template($('#main-template').html());
		this.layoutTemplate = _.template($('#layout-template').html());
		this.fetchStrings();
		var me = this;
	
		$(window).resize(function() {
			me.equalMainDivsHeight();
		});
	},

	cache: function() {
		this.timetableDiv = document.getElementById('main-timetable-div');
		this.sidebarDiv = document.getElementById('main-sidebar-div');
		this.timetableTable = document.getElementById('main-timetable-div table');
		this.container = document.getElementById('container-div');
		this.tabsNav = document.getElementById('main-tabs-nav');
	},

	equalMainDivsHeight: function() {
		var h = $(this.timetableDiv).height();
		$(this.sidebarDiv).height(h);

		var innerH = h-$(this.tabsNav).height();
		faltacursarView.$el.height(innerH);
		microhorarioView.$el.height(innerH);
		selectedView.$el.height(innerH);
	},	

	setActiveTab: function(tab) {
		$('#main-tabs-nav li').removeClass('active');
		$('#main-tab-panes div').removeClass('active');

		$('#'+this.tabs[tab].li).addClass('active');
		$('#'+this.tabs[tab].div).addClass('active');
	
		this.tabs[tab].view.resize();
	},

	fetchStrings: function() {
		this.tabs.faltacursar.str='Falta Cursar';
		this.tabs.microhorario.str='Micro Horario',
		this.tabs.selected.str='Selecionadas';
	},

	renderSubviews: function() {
		timetableView.setElement('#main-timetable-div');
		timetableView.render();

		faltacursarView.setElement('#main-faltacursar-div');
		faltacursarView.render();

		microhorarioView.setElement('#main-microhorario-div');
		microhorarioView.render();

		selectedView.setElement('#main-selected-div');
		selectedView.render();		
	},

	render: function() {
		this.$el.html(this.layoutTemplate(this.testData));
		$('#content-div').html(this.mainTemplate({tabs: this.tabs}));
		
		this.renderSubviews();
		this.rendered=true;

		this.cache();
		this.equalMainDivsHeight();
	}
});

var mainView = new MainView();
var ClasseslistView = Backbone.View.extend({
	template: '',
	el: '',

	//Cached
	classesDatatable: '',
	classesTableHead: '',
	classesTableBody: '',

	cache: function() {
		this.classesTableHead = this.$('.dataTables_scrollHead');
		this.classesTableBody = this.$('.dataTables_scrollBody');
	},

	resize: function() {
		this.classesDatatable.fnDraw(false);
	},

	calculateTableScroll: function() {},

	initialize: function() {
		this.template = _.template($('#classeslist-template').html());
	},

	initJS: function() {		
		var me = this;

		this.classesDatatable = this.$el.find('table').dataTable({			
			'sDom': this.options.sDom,
			'bPaginate': false,
			'bScrollCollapse': true,
			'sScrollY': '100px',
			'fnDrawCallback': function(oSettings) {
				me.calculateTableScroll();
			}
		});
	},

	fetchStrings: function() {
		return {'subjectCodeLabel': 'Disciplina',
			'subjectNameLabel': 'Nome da disciplina',
			'professorNameLabel': 'Professor',
			'classCodeLabel': 'Turma',
			'scheduleLabel': 'Horarios'};
	},

	fetchData: function(classesArray) {
		return $.extend({}, this.fetchStrings(),
			{classes: classesArray});
	},

	render: function(classesArray) {
		this.$el.html(this.template(
			this.fetchData(classesArray)
		));	

		this.initJS();
		this.cache();
	}
});

var MicrohorarioClasseslistView = ClasseslistView.extend({
	calculateTableScroll: function() {
		var h=0;
		if (!$('#microhorario-filter').hasClass('hidden'))
			h+=$('#microhorario-filter').outerHeight(true);
		h+=$('#microhorario-togglefilter').outerHeight(true);
	
		var diff = $(this.el).outerHeight(true)-$(this.el).height();
		var totH = $(this.el).parent().height()-h-diff;
	
		$(this.el).height(totH);
		var headH = $(this.classesTableHead).outerHeight();
		$(this.classesTableBody).height(totH-headH);
	}
});
var microhorarioClasseslistView = new MicrohorarioClasseslistView({sDom: 't'});

var FaltacursarClasseslistView = ClasseslistView.extend({
	calculateTableScroll: function() {
		var h = this.$el.height();
		var headerH= this.$el.find('.dataTables_filter').outerHeight(true)+
			$(this.classesTableHead).outerHeight(true);
		var diff = $(this.classesTableBody).outerHeight(true)-
			$(this.classesTableBody).height();

		$(this.classesTableBody).height(h-headerH-diff);
	},
});
var faltacursarClasseslistView = new FaltacursarClasseslistView({sDom: 'ft'});
function SelectedController() {
	
}

var selectedController = new SelectedController();
var MainRouter = Backbone.Router.extend({
	routes: {
		'': 'main',
		':tab': 'tabs'
	}
});

var mainRouter = new MainRouter();

mainRouter.on('route:main', function() {
	mainView.render();
	mainRouter.navigate(mainView.defaultTab,
		{trigger: true});
});

mainRouter.on('route:tabs', function(tab) {
	if (!mainView.tabs[tab])
		return mainRouter.navigate(mainView.defaultTab,
			{trigger: true, replace: true});
	
	if (!mainView.rendered)
		mainView.render();
	mainView.setActiveTab(tab);
});

//if (history.pushState) { 
//	console.log("pushState supported");
//	Backbone.history.start({pushState: true});
//}
//else {
//	console.log("pushState NOT supported");
	Backbone.history.start();
//}
